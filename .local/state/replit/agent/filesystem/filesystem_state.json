{"file_contents":{"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest<T = any>(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<T> {\n  const token = localStorage.getItem(\"archer_token\");\n  const headers: Record<string, string> = {};\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"archer_token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1790},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/lib/auth-context\";\nimport AuthPage from \"@/pages/auth\";\nimport ChatPage from \"@/pages/chat\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\n\nfunction ProtectedRoute({ component: Component }: { component: () => JSX.Element }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Redirect to=\"/auth\" />;\n  }\n\n  return <Component />;\n}\n\nfunction PublicRoute({ component: Component }: { component: () => JSX.Element }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return <Component />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={() => <PublicRoute component={AuthPage} />} />\n      <Route path=\"/\" component={() => <ProtectedRoute component={ChatPage} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction DarkModeInitializer() {\n  useEffect(() => {\n    document.documentElement.classList.add(\"dark\");\n  }, []);\n\n  return null;\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <DarkModeInitializer />\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2099},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"design_guidelines.md":{"content":"# Design Guidelines for Archer - E2EE Chat Application\n\n## Design Approach\n**Reference-Based: Telegram-Inspired with AMOLED Aesthetic**\n\nDrawing from Telegram's proven messaging interface patterns while implementing a pure AMOLED theme with maximum contrast. The design prioritizes clarity, speed, and privacy-focused minimalism.\n\n## Core Design Principles\n- **Maximum Contrast**: Pure blacks (#000000) and whites for AMOLED displays\n- **Information Density**: Efficient use of space like Telegram, no wasted pixels\n- **Touch-First**: Large tap targets (min 44px), swipe gestures, mobile-optimized\n- **Privacy Emphasis**: Visual indicators for encryption status, minimal metadata display\n\n## Typography System\n\n**Font Family**: \n- Primary: 'Inter' or 'SF Pro Display' for clean, modern readability\n- Monospace: 'JetBrains Mono' for usernames and encryption indicators\n\n**Hierarchy**:\n- Chat List Names: text-base font-semibold (16px, 600 weight)\n- Message Text: text-sm (14px, 400 weight)\n- Timestamps: text-xs (12px, 400 weight)\n- Input Fields: text-base (16px to prevent iOS zoom)\n- Profile Display Names: text-2xl font-bold (24px, 700 weight)\n- @usernames: text-sm font-mono (14px, monospace)\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 3, 4, 6, and 8 consistently\n- Component padding: p-4 (16px)\n- Section gaps: gap-3 (12px) for compact lists, gap-6 (24px) for spaced sections\n- Message bubbles: px-4 py-2\n- Screen margins: px-4 (mobile), px-6 (desktop)\n\n**Container Strategy**:\n- Mobile: Full viewport width (w-full), no outer margins except px-4\n- Desktop: Three-column layout (sidebar 320px, chat list 380px, conversation flex-1)\n- Max-width for chat messages: max-w-2xl to prevent excessive line length\n\n## Component Library\n\n### 1. Authentication Screens\n- **Login/Register**: Centered cards with max-w-sm, minimal form fields\n- Input fields with text-base size, p-3 padding\n- Primary action buttons: w-full, h-12, rounded-lg\n- Error messages: text-sm, positioned below inputs\n\n### 2. Navigation Structure\n**Desktop (≥1024px)**:\n- Split view: Left sidebar (user profile, settings icon), middle (chat list), right (active conversation)\n- Persistent navigation, no overlays\n\n**Mobile (<1024px)**:\n- Single-view stack: Chat list → Conversation (full screen transition)\n- Top navigation bar: h-14 with back button, chat name, action icons\n- Bottom input bar: Fixed positioning with safe-area-inset\n\n### 3. Chat List Component\n- Avatar: h-12 w-12 rounded-full (48px circles)\n- List items: h-18 with p-4, border-b dividers\n- Unread badges: Circular, h-5 min-w-5, text-xs, positioned top-right\n- Three-line structure: Name (bold), last message preview (truncate), timestamp\n- Swipe actions on mobile: Delete chat (80px swipe threshold)\n\n### 4. Conversation View\n**Message Bubbles**:\n- Received: Aligned left, max-w-[75%]\n- Sent: Aligned right, max-w-[75%]\n- Padding: px-4 py-2, rounded-2xl (Telegram-style rounded corners)\n- Timestamp: text-xs, positioned bottom-right inside bubble\n- Image messages: max-h-80, rounded-xl, maintain aspect ratio\n\n**Message Grouping**:\n- Same sender within 2 minutes: Reduce top margin to mt-1\n- Different sender or time gap: mt-4 separation\n\n**Input Area**:\n- Fixed bottom position with backdrop-blur\n- Height: min-h-14, auto-expand for multiline (max 5 lines)\n- Attachment button: h-10 w-10 icon button (left)\n- Send button: h-10 w-10 icon button (right)\n- Text input: flex-1, resize-none\n\n### 5. Profile View\n- Full-screen overlay (mobile) or right panel (desktop)\n- Profile picture: h-32 w-32 centered\n- Display name: text-2xl font-bold\n- @username: text-sm text-gray-400\n- Action buttons: w-full, h-12, gap-3 stacked\n- Encryption fingerprint display: Monospace font, text-xs, grid layout\n\n### 6. Modals & Overlays\n- Full-screen on mobile, centered cards on desktop\n- Backdrop: backdrop-blur-sm\n- Action sheets: Slide up from bottom, rounded-t-3xl\n- Confirmation dialogs: max-w-sm, p-6, button pairs\n\n## Animations (Framer Motion)\n\n**Limited, Purposeful Motion**:\n- Page transitions: Slide animations (x: 100% to 0) for navigation stack\n- Message send: Subtle scale + opacity (scale: 0.95 → 1, duration: 200ms)\n- Modal entry: fadeIn + slide-up (y: 20 → 0, duration: 250ms)\n- List updates: Layout animations only, no excessive motion\n\n**Disabled Animations**:\n- No hover effects on touch devices\n- No continuous/looping animations\n- No parallax or scroll-driven effects\n\n## Responsive Breakpoints\n\n- **Mobile**: Base styles (320px - 1023px)\n- **Desktop**: lg: prefix (1024px+)\n\n**Mobile-Specific**:\n- Stack all views vertically\n- Full-width buttons and inputs\n- Swipe gestures for actions\n- Bottom navigation/input bars with safe-area-inset-bottom\n\n**Desktop-Specific**:\n- Multi-column layout\n- Hover states for list items\n- Right-click context menus\n- Keyboard shortcuts visual hints\n\n## Accessibility\n\n- Focus indicators: ring-2 ring-offset-2 on all interactive elements\n- ARIA labels for icon-only buttons\n- Semantic HTML: <nav>, <main>, <article> for messages\n- Keyboard navigation: Tab order follows visual hierarchy\n- Screen reader: Announce new messages, encryption status\n- Touch targets: Minimum 44x44px for all buttons\n\n## Visual States\n\n**Encryption Indicators**:\n- Padlock icon in conversation header\n- \"End-to-end encrypted\" subtitle text\n- Encryption fingerprint verification CTA in profile\n\n**Message States**:\n- Sending: Opacity 0.6 with spinner\n- Sent: Single checkmark\n- Delivered: Double checkmark\n- Read: Blue double checkmark (if implementing read receipts)\n- Failed: Red warning icon with retry button\n\n**User Status**:\n- Online indicator: h-3 w-3 green dot on avatar\n- Typing indicator: Three animated dots in bubble style\n- Last seen: text-xs below name in conversation header\n\n## Privacy-First UI Elements\n\n- No message previews in notifications (only \"New message from @username\")\n- Screenshot detection warning modal\n- \"Delete for everyone\" confirmation dialog\n- Block user confirmation with clear consequences\n- Encrypted attachments show file size but no server-side thumbnails\n\nThis design creates a professional, privacy-focused messaging experience that feels familiar (Telegram-inspired) while emphasizing encryption and anonymity through thoughtful UI patterns and AMOLED aesthetics.","size_bytes":6286},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n        \"2xl\": \"1rem\", /* 16px for message bubbles */\n        \"3xl\": \"1.5rem\", /* 24px for action sheets */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4158},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/lib/auth-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, type ReactNode } from \"react\";\nimport { type SafeUser } from \"@shared/schema\";\nimport { type KeyPair, getKeysFromStorage } from \"./crypto\";\n\ninterface AuthContextType {\n  user: SafeUser | null;\n  token: string | null;\n  keyPair: KeyPair | null;\n  login: (user: SafeUser, token: string, keyPair: KeyPair) => void;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<SafeUser | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [keyPair, setKeyPair] = useState<KeyPair | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(\"archer_token\");\n    const storedUser = localStorage.getItem(\"archer_user\");\n\n    if (storedToken && storedUser) {\n      const parsedUser = JSON.parse(storedUser);\n      const keys = getKeysFromStorage(parsedUser.username);\n\n      if (keys) {\n        setToken(storedToken);\n        setUser(parsedUser);\n        setKeyPair(keys);\n      }\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  const login = (newUser: SafeUser, newToken: string, newKeyPair: KeyPair) => {\n    setUser(newUser);\n    setToken(newToken);\n    setKeyPair(newKeyPair);\n    localStorage.setItem(\"archer_token\", newToken);\n    localStorage.setItem(\"archer_user\", JSON.stringify(newUser));\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    setKeyPair(null);\n    localStorage.removeItem(\"archer_token\");\n    localStorage.removeItem(\"archer_user\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, token, keyPair, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2046},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 0 0% 0%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 97%;\n\n  --card-foreground: 0 0% 0%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 95%;\n\n  --sidebar-foreground: 0 0% 0%;\n\n  --sidebar-border: 0 0% 88%;\n\n  --sidebar-primary: 0 0% 15%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 0 0% 91%;\n\n  --sidebar-accent-foreground: 0 0% 0%;\n\n  --sidebar-ring: 0 0% 15%;\n\n  --popover: 0 0% 96%;\n\n  --popover-foreground: 0 0% 0%;\n\n  --popover-border: 0 0% 88%;\n\n  --primary: 0 0% 15%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 90%;\n\n  --secondary-foreground: 0 0% 0%;\n\n  --muted: 0 0% 93%;\n\n  --muted-foreground: 0 0% 45%;\n\n  --accent: 0 0% 88%;\n\n  --accent-foreground: 0 0% 0%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 75%;\n  --ring: 0 0% 15%;\n  --chart-1: 0 0% 30%;\n  --chart-2: 0 0% 40%;\n  --chart-3: 0 0% 50%;\n  --chart-4: 0 0% 60%;\n  --chart-5: 0 0% 70%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, 'SF Pro Display', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Menlo', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05), 0px 1px 3px 0px hsl(0 0% 0% / 0.10);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.10), 0px 4px 6px -4px hsl(0 0% 0% / 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.10), 0px 8px 10px -6px hsl(0 0% 0% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 0%;\n\n  --foreground: 0 0% 100%;\n\n  --border: 0 0% 12%;\n\n  --card: 0 0% 4%;\n\n  --card-foreground: 0 0% 100%;\n\n  --card-border: 0 0% 10%;\n\n  --sidebar: 0 0% 6%;\n\n  --sidebar-foreground: 0 0% 100%;\n\n  --sidebar-border: 0 0% 12%;\n\n  --sidebar-primary: 0 0% 85%;\n\n  --sidebar-primary-foreground: 0 0% 0%;\n\n  --sidebar-accent: 0 0% 10%;\n\n  --sidebar-accent-foreground: 0 0% 100%;\n\n  --sidebar-ring: 0 0% 85%;\n\n  --popover: 0 0% 6%;\n\n  --popover-foreground: 0 0% 100%;\n\n  --popover-border: 0 0% 12%;\n\n  --primary: 0 0% 85%;\n\n  --primary-foreground: 0 0% 0%;\n\n  --secondary: 0 0% 12%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 0 0% 8%;\n\n  --muted-foreground: 0 0% 55%;\n\n  --accent: 0 0% 12%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 25%;\n  --ring: 0 0% 85%;\n  --chart-1: 0 0% 70%;\n  --chart-2: 0 0% 60%;\n  --chart-3: 0 0% 50%;\n  --chart-4: 0 0% 40%;\n  --chart-5: 0 0% 30%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.50);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.60);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.50), 0px 1px 3px 0px hsl(0 0% 0% / 0.70);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.70), 0px 1px 2px -1px hsl(0 0% 0% / 0.70);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.70), 0px 2px 4px -2px hsl(0 0% 0% / 0.70);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.70), 0px 4px 6px -4px hsl(0 0% 0% / 0.70);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.70), 0px 8px 10px -6px hsl(0 0% 0% / 0.70);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.90);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9663},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"server/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nimport type { Request, Response, NextFunction } from \"express\";\n\nif (!process.env.SESSION_SECRET) {\n  throw new Error(\"SESSION_SECRET environment variable is required\");\n}\n\nconst JWT_SECRET = process.env.SESSION_SECRET;\nconst SALT_ROUNDS = 10;\n\nexport interface AuthRequest extends Request {\n  userId?: number;\n}\n\nexport const hashPassword = (password: string) => bcrypt.hash(password, SALT_ROUNDS);\nexport const verifyPassword = (password: string, hash: string) => bcrypt.compare(password, hash);\nexport const generateToken = (userId: number) => jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"30d\" });\n\nexport function verifyToken(token: string): { userId: number } | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as { userId: number };\n  } catch {\n    return null;\n  }\n}\n\nexport function authMiddleware(req: AuthRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader?.startsWith(\"Bearer \")) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n\n  const payload = verifyToken(authHeader.substring(7));\n  if (!payload) {\n    return res.status(401).json({ error: \"Invalid token\" });\n  }\n\n  req.userId = payload.userId;\n  next();\n}\n\nconst rateLimitMap = new Map<string, { count: number; resetTime: number }>();\n\nexport function rateLimit(maxAttempts: number, windowMs: number) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const key = req.ip || 'unknown';\n    const now = Date.now();\n    const record = rateLimitMap.get(key);\n\n    if (record && now < record.resetTime) {\n      if (record.count >= maxAttempts) {\n        return res.status(429).json({ error: \"Too many attempts. Please try again later.\" });\n      }\n      record.count++;\n    } else {\n      rateLimitMap.set(key, { count: 1, resetTime: now + windowMs });\n    }\n\n    next();\n  };\n}\n","size_bytes":1911},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/lib/crypto.ts":{"content":"export interface KeyPair {\n  publicKey: string;\n  privateKey: string;\n}\n\nexport interface EncryptedMessage {\n  encryptedContent: string;\n  senderEncryptedKey: string;\n  recipientEncryptedKey: string;\n  iv: string;\n}\n\nexport async function generateKeyPair(): Promise<KeyPair> {\n  const keyPair = await window.crypto.subtle.generateKey(\n    {\n      name: \"RSA-OAEP\",\n      modulusLength: 2048,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: \"SHA-256\",\n    },\n    true,\n    [\"encrypt\", \"decrypt\"]\n  );\n\n  const publicKey = await window.crypto.subtle.exportKey(\"spki\", keyPair.publicKey);\n  const privateKey = await window.crypto.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n\n  return {\n    publicKey: arrayBufferToBase64(publicKey),\n    privateKey: arrayBufferToBase64(privateKey),\n  };\n}\n\nexport async function encryptMessage(\n  message: string,\n  senderPublicKey: string,\n  recipientPublicKey: string\n): Promise<EncryptedMessage> {\n  const aesKey = await window.crypto.subtle.generateKey(\n    {\n      name: \"AES-GCM\",\n      length: 256,\n    },\n    true,\n    [\"encrypt\", \"decrypt\"]\n  );\n\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const encoder = new TextEncoder();\n  const data = encoder.encode(message);\n\n  const encryptedContent = await window.crypto.subtle.encrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv,\n    },\n    aesKey,\n    data\n  );\n\n  const exportedAesKey = await window.crypto.subtle.exportKey(\"raw\", aesKey);\n\n  const senderPubKey = await window.crypto.subtle.importKey(\n    \"spki\",\n    base64ToArrayBuffer(senderPublicKey),\n    {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\",\n    },\n    true,\n    [\"encrypt\"]\n  );\n\n  const recipientPubKey = await window.crypto.subtle.importKey(\n    \"spki\",\n    base64ToArrayBuffer(recipientPublicKey),\n    {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\",\n    },\n    true,\n    [\"encrypt\"]\n  );\n\n  const senderEncryptedKey = await window.crypto.subtle.encrypt(\n    {\n      name: \"RSA-OAEP\",\n    },\n    senderPubKey,\n    exportedAesKey\n  );\n\n  const recipientEncryptedKey = await window.crypto.subtle.encrypt(\n    {\n      name: \"RSA-OAEP\",\n    },\n    recipientPubKey,\n    exportedAesKey\n  );\n\n  return {\n    encryptedContent: arrayBufferToBase64(encryptedContent),\n    senderEncryptedKey: arrayBufferToBase64(senderEncryptedKey),\n    recipientEncryptedKey: arrayBufferToBase64(recipientEncryptedKey),\n    iv: arrayBufferToBase64(iv),\n  };\n}\n\nexport async function decryptMessage(\n  encryptedContent: string,\n  encryptedKey: string,\n  iv: string,\n  privateKey: string\n): Promise<string> {\n  const privateKeyObj = await window.crypto.subtle.importKey(\n    \"pkcs8\",\n    base64ToArrayBuffer(privateKey),\n    {\n      name: \"RSA-OAEP\",\n      hash: \"SHA-256\",\n    },\n    true,\n    [\"decrypt\"]\n  );\n\n  const decryptedAesKey = await window.crypto.subtle.decrypt(\n    {\n      name: \"RSA-OAEP\",\n    },\n    privateKeyObj,\n    base64ToArrayBuffer(encryptedKey)\n  );\n\n  const aesKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    decryptedAesKey,\n    {\n      name: \"AES-GCM\",\n      length: 256,\n    },\n    true,\n    [\"decrypt\"]\n  );\n\n  const decryptedContent = await window.crypto.subtle.decrypt(\n    {\n      name: \"AES-GCM\",\n      iv: base64ToArrayBuffer(iv),\n    },\n    aesKey,\n    base64ToArrayBuffer(encryptedContent)\n  );\n\n  const decoder = new TextDecoder();\n  return decoder.decode(decryptedContent);\n}\n\nexport function arrayBufferToBase64(buffer: ArrayBuffer): string {\n  const bytes = new Uint8Array(buffer);\n  let binary = \"\";\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binary = atob(base64);\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n\nexport function generateFingerprint(publicKey: string): string {\n  const hash = publicKey.slice(0, 40);\n  return hash.match(/.{1,4}/g)?.join(\" \") || hash;\n}\n\nexport function saveKeysToStorage(username: string, keyPair: KeyPair): void {\n  localStorage.setItem(`archer_keys_${username}`, JSON.stringify(keyPair));\n}\n\nexport function getKeysFromStorage(username: string): KeyPair | null {\n  const keys = localStorage.getItem(`archer_keys_${username}`);\n  return keys ? JSON.parse(keys) : null;\n}\n\nexport function clearKeysFromStorage(username: string): void {\n  localStorage.removeItem(`archer_keys_${username}`);\n}\n","size_bytes":4508},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"replit.md":{"content":"# Archer - E2EE Messaging Application\n\n## Overview\nArcher is a production-ready, end-to-end encrypted chat application built with React, Express, and SQLite. The application implements client-side encryption using the WebCrypto API, ensuring zero-knowledge architecture where the server cannot read messages or attachments.\n\n## Current State\n**Status**: Production-ready, optimized codebase\n**Last Updated**: October 30, 2025\n\n### Completed Features\n- ✅ Username/password authentication with JWT sessions\n- ✅ Client-side E2EE using RSA-OAEP + AES-256-GCM\n- ✅ Real-time encrypted messaging (text + images)\n- ✅ User profiles with @username, display name, profile picture\n- ✅ Message deletion (tombstone markers)\n- ✅ User blocking functionality\n- ✅ Chat deletion\n- ✅ AMOLED black/white UI theme\n- ✅ Framer Motion animations\n- ✅ Fully responsive mobile + desktop layouts\n\n## Project Architecture\n\n### Technology Stack\n**Frontend**:\n- React 18 with TypeScript\n- Wouter for routing\n- TanStack Query for state management\n- shadcn/ui components with Tailwind CSS\n- Framer Motion for animations\n- WebCrypto API for encryption\n\n**Backend**:\n- Express.js REST API\n- SQLite (better-sqlite3) for data persistence\n- bcrypt for password hashing\n- JWT for session management\n- Multer for file uploads\n\n### Encryption Architecture\n**Zero-Knowledge Design**: The server stores only encrypted message blobs and minimal routing metadata.\n\n**Key Management**:\n- RSA-2048 keypairs generated client-side on registration\n- Public keys stored on server, private keys stored in localStorage\n- Per-message AES-256-GCM symmetric keys\n- Symmetric keys encrypted with recipient's RSA public key\n\n**Message Flow**:\n1. User A generates random AES-256 key\n2. Message encrypted with AES-GCM\n3. AES key encrypted with User B's RSA public key\n4. Server stores: `{encryptedContent, encryptedKey, iv}`\n5. User B decrypts AES key with private RSA key\n6. User B decrypts message content with AES key\n\n### Database Schema\n\n**users**:\n- `id`: Primary key (auto-increment)\n- `username`: Unique username\n- `passwordHash`: bcrypt hashed password\n- `displayName`: User's display name\n- `profilePicture`: Optional profile picture URL\n- `publicKey`: RSA public key (base64)\n- `encryptedPrivateKey`: Recovery key encrypted with passphrase\n\n**messages**:\n- `id`: Primary key\n- `senderId`: Foreign key to users\n- `recipientId`: Foreign key to users\n- `encryptedContent`: Base64 encrypted message\n- `senderEncryptedKey`: Base64 encrypted AES key for sender\n- `recipientEncryptedKey`: Base64 encrypted AES key for recipient\n- `iv`: Initialization vector for AES\n- `type`: 'text' or 'image'\n- `deleted`: Boolean tombstone marker\n- `timestamp`: Message timestamp\n\n**blocks**:\n- `id`: Primary key\n- `blockerId`: User who blocked\n- `blockedId`: User who was blocked\n\n### API Routes\n\n**Authentication**:\n- `POST /api/auth/register` - Register new user with public key\n- `POST /api/auth/login` - Login and receive JWT token\n\n**Messages**:\n- `GET /api/messages/:userId` - Get encrypted messages with user\n- `POST /api/messages` - Send encrypted message\n- `DELETE /api/messages/:id` - Delete message (tombstone)\n\n**Conversations**:\n- `GET /api/conversations` - Get all conversations with last message\n- `DELETE /api/conversations/:userId` - Delete all messages with user\n\n**Users**:\n- `GET /api/users/:id` - Get user profile and public key\n\n**Blocks**:\n- `GET /api/blocks/:userId` - Check if user is blocked\n- `POST /api/blocks` - Block a user\n- `DELETE /api/blocks/:userId` - Unblock a user\n\n## Design System\n\n### AMOLED Theme\n- **Pure Blacks**: Background #000000 for AMOLED displays\n- **High Contrast**: White text on black for maximum readability\n- **Telegram-Inspired**: Familiar messaging patterns\n- **Privacy-First**: Encryption indicators throughout UI\n\n### Component Specifications\n- **Chat List**: 48px avatars, compact spacing, unread badges\n- **Message Bubbles**: Rounded corners (16px), max-width 75%\n- **Input Area**: Min 44px height, auto-expand to 5 lines\n- **Avatars**: Initials fallback for missing profile pictures\n- **Animations**: Subtle, purposeful motion (200-300ms)\n\n### Responsive Breakpoints\n- **Mobile** (<1024px): Single-view stack navigation\n- **Desktop** (≥1024px): Three-column layout (sidebar + chat list + conversation)\n\n## Development Workflow\n\n### Local Storage Keys\n- `archer_token`: JWT authentication token\n- `archer_user`: Current user object (JSON)\n- `archer_keys_{username}`: User's RSA keypair (JSON)\n\n### Security Considerations\n- Private keys never sent to server\n- Message content encrypted before transmission\n- Server cannot decrypt messages (zero-knowledge)\n- Password hashing with bcrypt (cost factor 10)\n- JWT tokens for stateless authentication\n- Mandatory SESSION_SECRET environment variable (no fallback)\n- Rate limiting on authentication endpoints (5 attempts per 15 minutes)\n- MIME type validation on file uploads (images only)\n- Dual-key encryption ensures both sender and recipient can decrypt messages\n\n## User Preferences\n- **Theme**: AMOLED dark mode (permanently enabled)\n- **Privacy**: End-to-end encryption mandatory\n- **UX**: Telegram-inspired interface patterns\n- **Performance**: Lightweight, minimal dependencies\n\n## Recent Changes\n- **Oct 30, 2025**: Complete codebase optimization and security hardening\n  - Simplified database schema: removed unnecessary timestamp fields\n  - Backend routes reduced from 349 to ~190 lines by eliminating duplication\n  - Streamlined storage layer with cleaner method chaining\n  - **Security improvements**:\n    - Enforced SESSION_SECRET environment variable (no insecure fallback)\n    - Added rate limiting for auth endpoints (5 attempts/15 minutes)\n    - Implemented MIME type validation for file uploads (images only)\n  - Preserved audit-ready crypto implementation (RSA-OAEP 2048, AES-256-GCM)\n  - Architecture review: PASS with no blocking bugs\n- **Oct 29, 2025**: Fixed critical E2EE security issues\n  - Implemented dual-key encryption (sender + recipient encrypted keys)\n  - Added SafeUser type to eliminate password hash exposure\n  - All E2EE flows validated end-to-end\n","size_bytes":6140},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { LogOut, Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { type Conversation } from \"@shared/schema\";\nimport { ChatList } from \"@/components/chat-list\";\nimport { ConversationView } from \"@/components/conversation-view\";\nimport { ProfileView } from \"@/components/profile-view\";\nimport { UserSearch } from \"@/components/user-search\";\nimport { SettingsDialog } from \"@/components/settings-dialog\";\nimport { useLocation } from \"wouter\";\n\nexport default function ChatPage() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [viewingProfile, setViewingProfile] = useState<number | null>(null);\n  const [showSidebar, setShowSidebar] = useState(false);\n\n  const { data: conversations = [], isLoading } = useQuery<Conversation[]>({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      if (selectedUserId) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/messages\", selectedUserId] });\n      }\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [selectedUserId]);\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/auth\");\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <div className=\"h-screen flex overflow-hidden bg-background\">\n      {/* Mobile Sidebar Overlay */}\n      <AnimatePresence>\n        {showSidebar && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n            onClick={() => setShowSidebar(false)}\n          />\n        )}\n      </AnimatePresence>\n\n      {/* Left Sidebar - User Profile */}\n      <motion.aside\n        initial={false}\n        animate={{ x: showSidebar ? 0 : \"-100%\" }}\n        transition={{ type: \"tween\", duration: 0.2 }}\n        className=\"fixed lg:relative inset-y-0 left-0 z-50 w-20 bg-card border-r border-card-border flex flex-col items-center py-4 gap-4 lg:translate-x-0\"\n      >\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          data-testid=\"button-close-sidebar\"\n          className=\"lg:hidden absolute top-2 right-2\"\n          onClick={() => setShowSidebar(false)}\n        >\n          <X className=\"h-5 w-5\" />\n        </Button>\n\n        <Avatar className=\"h-12 w-12\" data-testid=\"avatar-current-user\">\n          <AvatarImage src={user?.profilePicture || undefined} />\n          <AvatarFallback>{getInitials(user?.displayName || \"\")}</AvatarFallback>\n        </Avatar>\n\n        <div className=\"flex-1\" />\n\n        <SettingsDialog />\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          data-testid=\"button-logout\"\n          onClick={handleLogout}\n          className=\"hover-elevate\"\n        >\n          <LogOut className=\"h-5 w-5\" />\n        </Button>\n      </motion.aside>\n\n      {/* Middle Panel - Chat List */}\n      <div className=\"w-full lg:w-96 border-r border-border flex flex-col\">\n        <div className=\"h-14 px-4 flex items-center justify-between border-b border-border bg-card\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            data-testid=\"button-toggle-sidebar\"\n            className=\"lg:hidden\"\n            onClick={() => setShowSidebar(!showSidebar)}\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-lg font-semibold\">Chats</h1>\n          <UserSearch onSelectUser={setSelectedUserId} />\n        </div>\n\n        <ChatList\n          conversations={conversations}\n          selectedUserId={selectedUserId}\n          onSelectUser={setSelectedUserId}\n          isLoading={isLoading}\n        />\n      </div>\n\n      {/* Right Panel - Conversation */}\n      <div className=\"hidden lg:flex flex-1 flex-col\">\n        {selectedUserId ? (\n          <ConversationView\n            userId={selectedUserId}\n            onViewProfile={setViewingProfile}\n            onBack={() => setSelectedUserId(null)}\n          />\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center text-muted-foreground\">\n            <div className=\"text-center\">\n              <p className=\"text-lg\">Select a chat to start messaging</p>\n              <p className=\"text-sm mt-2\">Your messages are end-to-end encrypted</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Mobile Conversation View */}\n      <AnimatePresence>\n        {selectedUserId && (\n          <motion.div\n            initial={{ x: \"100%\" }}\n            animate={{ x: 0 }}\n            exit={{ x: \"100%\" }}\n            transition={{ type: \"tween\", duration: 0.25 }}\n            className=\"fixed inset-0 z-30 bg-background lg:hidden\"\n          >\n            <ConversationView\n              userId={selectedUserId}\n              onViewProfile={setViewingProfile}\n              onBack={() => setSelectedUserId(null)}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Profile View */}\n      <AnimatePresence>\n        {viewingProfile && (\n          <ProfileView userId={viewingProfile} onClose={() => setViewingProfile(null)} />\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n","size_bytes":5837},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/message-input.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Send, X, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { encryptMessage } from \"@/lib/crypto\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface MessageInputProps {\n  recipientId: number;\n  recipientPublicKey: string;\n}\n\nexport function MessageInput({ recipientId, recipientPublicKey }: MessageInputProps) {\n  const { keyPair } = useAuth();\n  const { toast } = useToast();\n  const [message, setMessage] = useState(\"\");\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { text?: string; imageFile?: File }) => {\n      if (!keyPair) throw new Error(\"No encryption keys available\");\n      \n      const currentUser = localStorage.getItem(\"archer_user\");\n      if (!currentUser) throw new Error(\"User not found\");\n      const senderPublicKey = JSON.parse(currentUser).publicKey;\n\n      let content = data.text || \"\";\n      let type: \"text\" | \"image\" = \"text\";\n\n      if (data.imageFile) {\n        const base64 = await fileToBase64(data.imageFile);\n        content = base64;\n        type = \"image\";\n      }\n\n      const encrypted = await encryptMessage(content, senderPublicKey, recipientPublicKey);\n\n      await apiRequest(\"POST\", \"/api/messages\", {\n        recipientId,\n        type,\n        ...encrypted,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\", recipientId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setMessage(\"\");\n      setImageFile(null);\n      setImagePreview(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const fileToBase64 = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleImageSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Image must be less than 5MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setImageFile(file);\n      const reader = new FileReader();\n      reader.onload = (e) => setImagePreview(e.target?.result as string);\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSend = () => {\n    if (imageFile) {\n      sendMessageMutation.mutate({ imageFile });\n    } else if (message.trim()) {\n      sendMessageMutation.mutate({ text: message.trim() });\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"border-t border-border bg-card p-4\">\n      {imagePreview && (\n        <div className=\"mb-3 relative inline-block\">\n          <img\n            src={imagePreview}\n            alt=\"Preview\"\n            className=\"h-24 rounded-lg object-cover\"\n            data-testid=\"image-preview\"\n          />\n          <Button\n            variant=\"destructive\"\n            size=\"icon\"\n            data-testid=\"button-remove-image\"\n            className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full\"\n            onClick={() => {\n              setImageFile(null);\n              setImagePreview(null);\n              if (fileInputRef.current) fileInputRef.current.value = \"\";\n            }}\n          >\n            <X className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      )}\n\n      <div className=\"flex items-end gap-2\">\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"image/*\"\n          className=\"hidden\"\n          onChange={handleImageSelect}\n          data-testid=\"input-file\"\n        />\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          data-testid=\"button-attach\"\n          onClick={() => fileInputRef.current?.click()}\n          disabled={sendMessageMutation.isPending || !!imageFile}\n          className=\"shrink-0\"\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\" className=\"h-5 w-5\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z\" />\n          </svg>\n        </Button>\n\n        <Textarea\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder=\"Type a message...\"\n          data-testid=\"input-message\"\n          disabled={sendMessageMutation.isPending || !!imageFile}\n          className=\"min-h-[44px] max-h-32 resize-none\"\n          rows={1}\n        />\n\n        <Button\n          size=\"icon\"\n          data-testid=\"button-send\"\n          onClick={handleSend}\n          disabled={\n            sendMessageMutation.isPending || (!message.trim() && !imageFile)\n          }\n          className=\"shrink-0\"\n        >\n          {sendMessageMutation.isPending ? (\n            <Loader2 className=\"h-5 w-5 animate-spin\" />\n          ) : (\n            <Send className=\"h-5 w-5\" />\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6036},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/profile-view.tsx":{"content":"import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { X, Shield, UserX, Copy, Check } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { generateFingerprint } from \"@/lib/crypto\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type SafeUser } from \"@shared/schema\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ProfileViewProps {\n  userId: number;\n  onClose: () => void;\n}\n\nexport function ProfileView({ userId, onClose }: ProfileViewProps) {\n  const { user: currentUser } = useAuth();\n  const { toast } = useToast();\n  const [copied, setCopied] = useState(false);\n\n  const { data: user, isLoading } = useQuery<SafeUser>({\n    queryKey: [\"/api/users\", userId],\n  });\n\n  const { data: isBlocked = false } = useQuery<boolean>({\n    queryKey: [\"/api/blocks\", userId],\n  });\n\n  const blockMutation = useMutation({\n    mutationFn: async () => {\n      if (isBlocked) {\n        await apiRequest(\"DELETE\", `/api/blocks/${userId}`, undefined);\n      } else {\n        await apiRequest(\"POST\", \"/api/blocks\", { blockedId: userId });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/blocks\", userId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      toast({\n        title: isBlocked ? \"User unblocked\" : \"User blocked\",\n        description: isBlocked\n          ? \"You can now receive messages from this user\"\n          : \"You will no longer receive messages from this user\",\n      });\n    },\n  });\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const copyFingerprint = () => {\n    if (user) {\n      const fingerprint = generateFingerprint(user.publicKey);\n      navigator.clipboard.writeText(fingerprint);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n      toast({\n        title: \"Copied to clipboard\",\n        description: \"Encryption fingerprint copied\",\n      });\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"fixed inset-0 z-50 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4\"\n      onClick={onClose}\n    >\n      <motion.div\n        initial={{ scale: 0.95, y: 20 }}\n        animate={{ scale: 1, y: 0 }}\n        exit={{ scale: 0.95, y: 20 }}\n        transition={{ duration: 0.2 }}\n        className=\"w-full max-w-sm bg-card rounded-lg shadow-xl overflow-hidden\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"relative h-32 bg-gradient-to-br from-primary/20 to-primary/5\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            data-testid=\"button-close-profile\"\n            onClick={onClose}\n            className=\"absolute top-2 right-2 bg-background/80 backdrop-blur-sm\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* Profile Content */}\n        <div className=\"px-6 pb-6\">\n          <div className=\"-mt-16 mb-4\">\n            {isLoading ? (\n              <Skeleton className=\"h-32 w-32 rounded-full mx-auto\" />\n            ) : (\n              <Avatar className=\"h-32 w-32 mx-auto border-4 border-card\" data-testid=\"avatar-profile\">\n                <AvatarImage src={user?.profilePicture || undefined} />\n                <AvatarFallback className=\"text-4xl\">\n                  {getInitials(user?.displayName || \"\")}\n                </AvatarFallback>\n              </Avatar>\n            )}\n          </div>\n\n          {isLoading ? (\n            <div className=\"space-y-3 mb-6\">\n              <Skeleton className=\"h-6 w-32 mx-auto\" />\n              <Skeleton className=\"h-4 w-24 mx-auto\" />\n            </div>\n          ) : (\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold\" data-testid=\"text-profile-name\">\n                {user?.displayName}\n              </h2>\n              <p className=\"text-sm text-muted-foreground font-mono mt-1\">\n                @{user?.username}\n              </p>\n            </div>\n          )}\n\n          {/* Encryption Fingerprint */}\n          {user && (\n            <div className=\"mb-6 p-4 bg-muted rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-2 text-sm font-medium\">\n                  <Shield className=\"h-4 w-4\" />\n                  <span>Encryption Fingerprint</span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  data-testid=\"button-copy-fingerprint\"\n                  onClick={copyFingerprint}\n                  className=\"h-8 w-8\"\n                >\n                  {copied ? (\n                    <Check className=\"h-4 w-4 text-green-500\" />\n                  ) : (\n                    <Copy className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              <p className=\"text-xs font-mono text-muted-foreground break-all\">\n                {generateFingerprint(user.publicKey)}\n              </p>\n            </div>\n          )}\n\n          {/* Actions */}\n          {currentUser?.id !== userId && (\n            <div className=\"space-y-3\">\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    variant={isBlocked ? \"default\" : \"destructive\"}\n                    data-testid=\"button-block-user\"\n                    className=\"w-full h-12\"\n                  >\n                    <UserX className=\"h-4 w-4 mr-2\" />\n                    {isBlocked ? \"Unblock User\" : \"Block User\"}\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>\n                      {isBlocked ? \"Unblock user?\" : \"Block user?\"}\n                    </AlertDialogTitle>\n                    <AlertDialogDescription>\n                      {isBlocked\n                        ? `You will be able to receive messages from ${user?.displayName} again.`\n                        : `${user?.displayName} will no longer be able to send you messages. You can unblock them later.`}\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction\n                      onClick={() => blockMutation.mutate()}\n                      className={\n                        isBlocked\n                          ? \"\"\n                          : \"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                      }\n                    >\n                      {isBlocked ? \"Unblock\" : \"Block\"}\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          )}\n\n          <div className=\"mt-6 pt-6 border-t border-border\">\n            <p className=\"text-xs text-center text-muted-foreground\">\n              Verify the encryption fingerprint to ensure secure communication\n            </p>\n          </div>\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n}\n","size_bytes":7935},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/db.ts":{"content":"import Database from \"better-sqlite3\";\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\nimport { users, messages, blocks, reactions } from \"@shared/schema\";\n\nconst sqlite = new Database(\"archer.db\");\n\nsqlite.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT NOT NULL UNIQUE,\n    password_hash TEXT NOT NULL,\n    display_name TEXT NOT NULL,\n    profile_picture TEXT,\n    public_key TEXT NOT NULL,\n    encrypted_private_key TEXT\n  );\n\n  CREATE TABLE IF NOT EXISTS messages (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    sender_id INTEGER NOT NULL,\n    recipient_id INTEGER NOT NULL,\n    encrypted_content TEXT NOT NULL,\n    sender_encrypted_key TEXT NOT NULL,\n    recipient_encrypted_key TEXT NOT NULL,\n    iv TEXT NOT NULL,\n    type TEXT NOT NULL DEFAULT 'text',\n    deleted INTEGER NOT NULL DEFAULT 0,\n    timestamp INTEGER NOT NULL DEFAULT (unixepoch()),\n    FOREIGN KEY (sender_id) REFERENCES users(id),\n    FOREIGN KEY (recipient_id) REFERENCES users(id)\n  );\n\n  CREATE TABLE IF NOT EXISTS blocks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    blocker_id INTEGER NOT NULL,\n    blocked_id INTEGER NOT NULL,\n    FOREIGN KEY (blocker_id) REFERENCES users(id),\n    FOREIGN KEY (blocked_id) REFERENCES users(id),\n    UNIQUE(blocker_id, blocked_id)\n  );\n\n  CREATE TABLE IF NOT EXISTS reactions (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    message_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    emoji TEXT NOT NULL,\n    FOREIGN KEY (message_id) REFERENCES messages(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    UNIQUE(message_id, user_id, emoji)\n  );\n\n  CREATE INDEX IF NOT EXISTS idx_messages_sender ON messages(sender_id);\n  CREATE INDEX IF NOT EXISTS idx_messages_recipient ON messages(recipient_id);\n  CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON messages(timestamp);\n  CREATE INDEX IF NOT EXISTS idx_blocks_blocker ON blocks(blocker_id);\n  CREATE INDEX IF NOT EXISTS idx_blocks_blocked ON blocks(blocked_id);\n  CREATE INDEX IF NOT EXISTS idx_reactions_message ON reactions(message_id);\n`);\n\nexport const db = drizzle(sqlite);\nexport { sqlite };\n","size_bytes":2155},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { hashPassword, verifyPassword, generateToken, authMiddleware, rateLimit, type AuthRequest } from \"./auth\";\nimport { insertUserSchema, insertMessageSchema, insertBlockSchema } from \"@shared/schema\";\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024 },\n  fileFilter: (req, file, cb) => {\n    const allowed = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n    cb(null, allowed.includes(file.mimetype));\n  },\n});\n\nconst registerLimit = rateLimit(10, 15 * 60 * 1000);\nconst loginLimit = rateLimit(15, 5 * 60 * 1000);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.post(\"/api/auth/register\", registerLimit, async (req, res) => {\n    try {\n      const { username, password, displayName, publicKey, profilePicture, encryptedPrivateKey } = req.body;\n      \n      const parsed = insertUserSchema.omit({ passwordHash: true }).safeParse({ username, displayName, publicKey, encryptedPrivateKey });\n      if (!parsed.success) return res.status(400).json({ error: \"Invalid input\" });\n      if (!password || password.length < 6) return res.status(400).json({ error: \"Password must be at least 6 characters\" });\n      if (await storage.getUserByUsername(username)) return res.status(400).json({ error: \"Username already exists\" });\n\n      const user = await storage.createUser({ ...parsed.data, passwordHash: await hashPassword(password), profilePicture });\n      const { passwordHash: _, ...safeUser } = user;\n      res.json({ user: safeUser, token: generateToken(user.id) });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", loginLimit, async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      if (!username || !password) return res.status(400).json({ error: \"Username and password required\" });\n\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await verifyPassword(password, user.passwordHash))) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const { passwordHash: _, ...safeUser } = user;\n      res.json({ user: safeUser, token: generateToken(user.id) });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/change-password\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      if (!currentPassword || !newPassword || newPassword.length < 6) {\n        return res.status(400).json({ error: \"Invalid passwords\" });\n      }\n\n      const user = await storage.getUser(req.userId!);\n      if (!user || !(await verifyPassword(currentPassword, user.passwordHash))) {\n        return res.status(401).json({ error: \"Current password is incorrect\" });\n      }\n\n      await storage.updateUserPassword(user.id, await hashPassword(newPassword));\n      res.json({ success: true });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/recover\", loginLimit, async (req, res) => {\n    try {\n      const { username, newPassword } = req.body;\n      if (!username || !newPassword || newPassword.length < 6) {\n        return res.status(400).json({ error: \"Invalid input\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      if (!user?.encryptedPrivateKey) return res.status(404).json({ error: \"Recovery not available\" });\n\n      await storage.updateUserPassword(user.id, await hashPassword(newPassword));\n      const { passwordHash: _, ...safeUser } = user;\n      res.json({ encryptedPrivateKey: user.encryptedPrivateKey, user: safeUser, token: generateToken(user.id) });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const user = await storage.getUser(parseInt(req.params.id));\n      if (!user) return res.status(404).json({ error: \"User not found\" });\n      const { passwordHash: _, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/search/:query\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const users = await storage.searchUsers(req.params.query.toLowerCase());\n      res.json(users.map(({ passwordHash, ...user }) => user));\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/messages/:userId\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const otherId = parseInt(req.params.userId);\n      if (await storage.isBlocked(otherId, req.userId!)) return res.json([]);\n      res.json(await storage.getMessages(req.userId!, otherId));\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/messages\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const parsed = insertMessageSchema.safeParse({ ...req.body, senderId: req.userId });\n      if (!parsed.success) return res.status(400).json({ error: \"Invalid input\" });\n      if (await storage.isBlocked(parsed.data.recipientId, req.userId!)) {\n        return res.status(403).json({ error: \"Cannot send message to this user\" });\n      }\n      res.json(await storage.createMessage(parsed.data));\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/messages/:id\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const deleted = await storage.deleteMessage(parseInt(req.params.id), req.userId!);\n      if (!deleted) return res.status(403).json({ error: \"Cannot delete this message\" });\n      res.json({ success: true });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/messages/delete-bulk\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const { messageIds } = req.body;\n      if (!Array.isArray(messageIds)) return res.status(400).json({ error: \"Invalid input\" });\n      const deleted = await storage.deleteMessages(messageIds, req.userId!);\n      if (!deleted) return res.status(403).json({ error: \"Cannot delete messages\" });\n      res.json({ success: true });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/conversations\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      res.json(await storage.getConversations(req.userId!));\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/conversations/:userId\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      await storage.deleteConversation(req.userId!, parseInt(req.params.userId));\n      res.json({ success: true });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/blocks/:userId\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      res.json(await storage.isBlocked(req.userId!, parseInt(req.params.userId)));\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/blocks\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const parsed = insertBlockSchema.safeParse({ blockerId: req.userId, blockedId: req.body.blockedId });\n      if (!parsed.success) return res.status(400).json({ error: \"Invalid input\" });\n      res.json(await storage.blockUser(parsed.data.blockerId, parsed.data.blockedId));\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/blocks/:userId\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const unblocked = await storage.unblockUser(req.userId!, parseInt(req.params.userId));\n      if (!unblocked) return res.status(404).json({ error: \"Block not found\" });\n      res.json({ success: true });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/upload\", authMiddleware, upload.single(\"file\"), async (req: AuthRequest, res) => {\n    try {\n      if (!req.file) return res.status(400).json({ error: \"No file uploaded\" });\n      const base64 = `data:${req.file.mimetype};base64,${req.file.buffer.toString(\"base64\")}`;\n      res.json({ data: base64 });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9324},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/user-search.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, MessageCircle } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { type SafeUser } from \"@shared/schema\";\nimport { useAuth } from \"@/lib/auth-context\";\n\ninterface UserSearchProps {\n  onSelectUser: (userId: number) => void;\n}\n\nexport function UserSearch({ onSelectUser }: UserSearchProps) {\n  const { user: currentUser } = useAuth();\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: users = [] } = useQuery<SafeUser[]>({\n    queryKey: [\"/api/users/search\", searchQuery],\n    enabled: searchQuery.length >= 2,\n  });\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const filteredUsers = users.filter((u) => u.id !== currentUser?.id);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-search-users\">\n          <Search className=\"h-5 w-5\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Find Users</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search by username...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search-users\"\n              className=\"pl-9\"\n            />\n          </div>\n\n          <div className=\"max-h-64 overflow-y-auto space-y-2\">\n            {searchQuery.length < 2 ? (\n              <p className=\"text-sm text-muted-foreground text-center py-4\">\n                Type at least 2 characters to search\n              </p>\n            ) : filteredUsers.length === 0 ? (\n              <p className=\"text-sm text-muted-foreground text-center py-4\">\n                No users found\n              </p>\n            ) : (\n              filteredUsers.map((user) => (\n                <button\n                  key={user.id}\n                  data-testid={`user-search-result-${user.id}`}\n                  onClick={() => {\n                    onSelectUser(user.id);\n                    setOpen(false);\n                    setSearchQuery(\"\");\n                  }}\n                  className=\"w-full p-3 flex items-center gap-3 rounded-md hover-elevate active-elevate-2\"\n                >\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={user.profilePicture || undefined} />\n                    <AvatarFallback>{getInitials(user.displayName)}</AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 text-left\">\n                    <p className=\"font-semibold\">{user.displayName}</p>\n                    <p className=\"text-sm text-muted-foreground font-mono\">@{user.username}</p>\n                  </div>\n                  <MessageCircle className=\"h-5 w-5 text-muted-foreground\" />\n                </button>\n              ))\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3625},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { sqliteTable, text, integer } from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = sqliteTable(\"users\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  username: text(\"username\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  displayName: text(\"display_name\").notNull(),\n  profilePicture: text(\"profile_picture\"),\n  publicKey: text(\"public_key\").notNull(),\n  encryptedPrivateKey: text(\"encrypted_private_key\"),\n});\n\nexport const messages = sqliteTable(\"messages\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  senderId: integer(\"sender_id\").notNull().references(() => users.id),\n  recipientId: integer(\"recipient_id\").notNull().references(() => users.id),\n  encryptedContent: text(\"encrypted_content\").notNull(),\n  senderEncryptedKey: text(\"sender_encrypted_key\").notNull(),\n  recipientEncryptedKey: text(\"recipient_encrypted_key\").notNull(),\n  iv: text(\"iv\").notNull(),\n  type: text(\"type\", { enum: [\"text\", \"image\"] }).notNull().default(\"text\"),\n  deleted: integer(\"deleted\", { mode: \"boolean\" }).notNull().default(false),\n  timestamp: integer(\"timestamp\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const blocks = sqliteTable(\"blocks\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  blockerId: integer(\"blocker_id\").notNull().references(() => users.id),\n  blockedId: integer(\"blocked_id\").notNull().references(() => users.id),\n});\n\nexport const reactions = sqliteTable(\"reactions\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  messageId: integer(\"message_id\").notNull().references(() => messages.id, { onDelete: \"cascade\" }),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  emoji: text(\"emoji\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users, {\n  username: z.string().min(3).max(20).regex(/^[a-zA-Z0-9_]+$/),\n  displayName: z.string().min(1).max(50),\n  publicKey: z.string().min(1),\n  encryptedPrivateKey: z.string().optional(),\n}).omit({ id: true });\n\nexport const insertMessageSchema = createInsertSchema(messages, {\n  encryptedContent: z.string().min(1),\n  senderEncryptedKey: z.string().min(1),\n  recipientEncryptedKey: z.string().min(1),\n  iv: z.string().min(1),\n  type: z.enum([\"text\", \"image\"]).default(\"text\"),\n}).omit({ id: true, timestamp: true, deleted: true });\n\nexport const insertBlockSchema = createInsertSchema(blocks).omit({ id: true });\n\nexport const insertReactionSchema = createInsertSchema(reactions).omit({ id: true });\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type SafeUser = Omit<User, \"passwordHash\">;\n\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n\nexport type InsertBlock = z.infer<typeof insertBlockSchema>;\n\nexport type Reaction = typeof reactions.$inferSelect;\nexport type InsertReaction = z.infer<typeof insertReactionSchema>;\n\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1),\n  newPassword: z.string().min(6),\n  confirmPassword: z.string().min(1),\n}).refine(d => d.newPassword === d.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\nexport type ChangePassword = z.infer<typeof changePasswordSchema>;\n\nexport interface Conversation {\n  userId: number;\n  username: string;\n  displayName: string;\n  profilePicture: string | null;\n  lastMessage: string | null;\n  lastMessageTime: Date | null;\n  unreadCount: number;\n}\n\nexport interface DecryptedMessage extends Omit<Message, \"encryptedContent\"> {\n  content: string;\n}\n","size_bytes":3747},"client/src/components/message-bubble.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { CheckCheck, Trash2 } from \"lucide-react\";\nimport { type DecryptedMessage } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface MessageBubbleProps {\n  message: DecryptedMessage;\n  isOwn: boolean;\n  isFirst: boolean;\n  isLast: boolean;\n  onDelete: () => void;\n  currentUserId: number;\n}\n\nexport function MessageBubble({ message, isOwn, isFirst, isLast, onDelete }: MessageBubbleProps) {\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [isSelected, setIsSelected] = useState(false);\n  const messageRef = useRef<HTMLDivElement>(null);\n\n  const formatTime = (date: Date) => {\n    return new Date(date).toLocaleTimeString(\"en-US\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const isDeleted = message.deleted;\n  const isImage = message.type === \"image\" && !isDeleted;\n\n  const handleMessageClick = () => {\n    if (!isDeleted && isOwn) {\n      setIsSelected(!isSelected);\n    }\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (messageRef.current && !messageRef.current.contains(event.target as Node)) {\n        setIsSelected(false);\n      }\n    };\n\n    if (isSelected) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n    }\n  }, [isSelected]);\n\n  return (\n    <>\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.15 }}\n        className={`flex ${isOwn ? \"justify-end\" : \"justify-start\"} ${isFirst ? \"mt-3\" : \"mt-0.5\"}`}\n      >\n        <div ref={messageRef} className=\"relative max-w-[75%]\">\n          <div\n            onClick={handleMessageClick}\n            data-testid={`message-${message.id}`}\n            className={`rounded-2xl px-4 py-2 ${\n              isOwn\n                ? \"bg-primary text-primary-foreground\"\n                : \"bg-card border border-card-border text-card-foreground\"\n            } ${isDeleted ? \"opacity-60 italic\" : \"\"} ${!isDeleted && isOwn ? \"cursor-pointer\" : \"\"}`}\n          >\n            {isImage ? (\n              <div className=\"space-y-2\">\n                <img\n                  src={message.content}\n                  alt=\"Attachment\"\n                  className=\"max-h-80 rounded-xl object-cover\"\n                  data-testid={`image-message-${message.id}`}\n                />\n                {isLast && (\n                  <div className=\"flex items-center justify-end gap-1 text-xs opacity-70\">\n                    <span>{formatTime(message.timestamp)}</span>\n                    {isOwn && <CheckCheck className=\"h-3 w-3\" />}\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"space-y-1\">\n                <p className=\"text-sm whitespace-pre-wrap break-words\">{message.content}</p>\n                {isLast && (\n                  <div className=\"flex items-center justify-end gap-1 text-xs opacity-70\">\n                    <span>{formatTime(message.timestamp)}</span>\n                    {isOwn && !isDeleted && <CheckCheck className=\"h-3 w-3\" />}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          <AnimatePresence>\n            {isSelected && isOwn && !isDeleted && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                transition={{ duration: 0.15 }}\n                className=\"absolute -top-2 -right-2 z-10\"\n              >\n                <Button\n                  variant=\"destructive\"\n                  size=\"icon\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowDeleteDialog(true);\n                  }}\n                  className=\"h-7 w-7 rounded-full\"\n                  data-testid={`button-delete-message-${message.id}`}\n                >\n                  <Trash2 className=\"h-3.5 w-3.5\" />\n                </Button>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </motion.div>\n\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete message?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will delete the message for everyone. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => setIsSelected(false)}>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                onDelete();\n                setShowDeleteDialog(false);\n                setIsSelected(false);\n              }}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":5508},"server/storage.ts":{"content":"import { eq, and, or, desc, sql, inArray } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport { users, messages, blocks, type User, type Message, type Conversation } from \"@shared/schema\";\n\nclass Storage {\n  async getUser(id: number) {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string) {\n    return (await db.select().from(users).where(eq(users.username, username)).limit(1))[0];\n  }\n\n  async searchUsers(query: string) {\n    return db.select().from(users).where(sql`LOWER(${users.username}) LIKE ${`%${query}%`}`).limit(20);\n  }\n\n  async createUser(data: typeof users.$inferInsert) {\n    return (await db.insert(users).values(data).returning())[0];\n  }\n\n  async updateUserPassword(userId: number, passwordHash: string) {\n    return (await db.update(users).set({ passwordHash }).where(eq(users.id, userId)).returning()).length > 0;\n  }\n\n  async getMessages(userId1: number, userId2: number) {\n    return db.select().from(messages).where(\n      or(\n        and(eq(messages.senderId, userId1), eq(messages.recipientId, userId2)),\n        and(eq(messages.senderId, userId2), eq(messages.recipientId, userId1))\n      )\n    ).orderBy(messages.timestamp);\n  }\n\n  async createMessage(data: typeof messages.$inferInsert) {\n    return (await db.insert(messages).values(data).returning())[0];\n  }\n\n  async deleteMessage(messageId: number, userId: number) {\n    const msg = (await db.select().from(messages).where(eq(messages.id, messageId)).limit(1))[0];\n    if (!msg || msg.senderId !== userId) return false;\n    await db.update(messages).set({ deleted: true }).where(eq(messages.id, messageId));\n    return true;\n  }\n\n  async deleteMessages(messageIds: number[], userId: number) {\n    const msgs = await db.select().from(messages).where(inArray(messages.id, messageIds));\n    const validIds = msgs.filter(m => m.senderId === userId).map(m => m.id);\n    if (validIds.length === 0) return false;\n    await db.update(messages).set({ deleted: true }).where(inArray(messages.id, validIds));\n    return true;\n  }\n\n  async deleteConversation(userId1: number, userId2: number) {\n    await db.delete(messages).where(\n      or(\n        and(eq(messages.senderId, userId1), eq(messages.recipientId, userId2)),\n        and(eq(messages.senderId, userId2), eq(messages.recipientId, userId1))\n      )\n    );\n  }\n\n  async getConversations(userId: number): Promise<Conversation[]> {\n    const blockedIds = (await db.select({ id: blocks.blockedId }).from(blocks).where(eq(blocks.blockerId, userId))).map(b => b.id);\n    const msgs = await db.select().from(messages).where(or(eq(messages.senderId, userId), eq(messages.recipientId, userId))).orderBy(desc(messages.timestamp));\n    \n    const convMap = new Map<number, Conversation>();\n    for (const msg of msgs) {\n      const otherId = msg.senderId === userId ? msg.recipientId : msg.senderId;\n      if (blockedIds.includes(otherId) || convMap.has(otherId)) continue;\n      \n      const other = await this.getUser(otherId);\n      if (!other) continue;\n      \n      convMap.set(otherId, {\n        userId: otherId,\n        username: other.username,\n        displayName: other.displayName,\n        profilePicture: other.profilePicture,\n        lastMessage: msg.deleted ? \"[Message deleted]\" : null,\n        lastMessageTime: msg.timestamp,\n        unreadCount: 0,\n      });\n    }\n    return Array.from(convMap.values());\n  }\n\n  async isBlocked(blockerId: number, blockedId: number) {\n    return (await db.select().from(blocks).where(and(eq(blocks.blockerId, blockerId), eq(blocks.blockedId, blockedId))).limit(1)).length > 0;\n  }\n\n  async blockUser(blockerId: number, blockedId: number) {\n    return (await db.insert(blocks).values({ blockerId, blockedId }).returning())[0];\n  }\n\n  async unblockUser(blockerId: number, blockedId: number) {\n    return (await db.delete(blocks).where(and(eq(blocks.blockerId, blockerId), eq(blocks.blockedId, blockedId))).returning()).length > 0;\n  }\n}\n\nexport const storage = new Storage();\n","size_bytes":4049},"client/src/components/chat-list.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Trash2 } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Conversation } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ChatListProps {\n  conversations: Conversation[];\n  selectedUserId: number | null;\n  onSelectUser: (userId: number) => void;\n  isLoading: boolean;\n}\n\nexport function ChatList({\n  conversations,\n  selectedUserId,\n  onSelectUser,\n  isLoading,\n}: ChatListProps) {\n  const { toast } = useToast();\n  const [longPressedUserId, setLongPressedUserId] = useState<number | null>(null);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [userToDelete, setUserToDelete] = useState<number | null>(null);\n  const longPressTimer = useRef<NodeJS.Timeout | null>(null);\n  const listRef = useRef<HTMLDivElement>(null);\n\n  const deleteChatMutation = useMutation({\n    mutationFn: async (userId: number) => {\n      await apiRequest(\"DELETE\", `/api/conversations/${userId}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      toast({\n        title: \"Chat deleted\",\n        description: \"Conversation has been removed\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (listRef.current && !listRef.current.contains(event.target as Node)) {\n        setLongPressedUserId(null);\n      }\n    };\n\n    if (longPressedUserId !== null) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      document.addEventListener(\"touchstart\", handleClickOutside);\n      return () => {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n        document.removeEventListener(\"touchstart\", handleClickOutside);\n      };\n    }\n  }, [longPressedUserId]);\n\n  const handleLongPressStart = (userId: number) => {\n    longPressTimer.current = setTimeout(() => {\n      setLongPressedUserId(userId);\n    }, 500); // 500ms long press\n  };\n\n  const handleLongPressEnd = () => {\n    if (longPressTimer.current) {\n      clearTimeout(longPressTimer.current);\n      longPressTimer.current = null;\n    }\n  };\n\n  const handleChatClick = (userId: number) => {\n    if (longPressedUserId === userId) {\n      setLongPressedUserId(null);\n    } else {\n      onSelectUser(userId);\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const formatTime = (date: Date | null) => {\n    if (!date) return \"\";\n    const now = new Date();\n    const diff = now.getTime() - new Date(date).getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n\n    if (minutes < 1) return \"Just now\";\n    if (minutes < 60) return `${minutes}m`;\n    if (hours < 24) return `${hours}h`;\n    if (days < 7) return `${days}d`;\n    return new Date(date).toLocaleDateString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 overflow-y-auto\">\n        {[1, 2, 3, 4, 5].map((i) => (\n          <div key={i} className=\"p-4 border-b border-border flex items-center gap-3\">\n            <Skeleton className=\"h-12 w-12 rounded-full\" />\n            <div className=\"flex-1\">\n              <Skeleton className=\"h-4 w-32 mb-2\" />\n              <Skeleton className=\"h-3 w-48\" />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (conversations.length === 0) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center p-4\">\n        <div className=\"text-center text-muted-foreground\">\n          <p>No conversations yet</p>\n          <p className=\"text-sm mt-1\">Start chatting by searching for users</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div ref={listRef} className=\"flex-1 overflow-y-auto\">\n        {conversations.map((conversation) => (\n          <motion.div\n            key={conversation.userId}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className={`relative ${\n              selectedUserId === conversation.userId ? \"bg-accent\" : \"\"\n            }`}\n          >\n            <button\n              data-testid={`chat-item-${conversation.userId}`}\n              onClick={() => handleChatClick(conversation.userId)}\n              onMouseDown={() => handleLongPressStart(conversation.userId)}\n              onMouseUp={handleLongPressEnd}\n              onMouseLeave={handleLongPressEnd}\n              onTouchStart={() => handleLongPressStart(conversation.userId)}\n              onTouchEnd={handleLongPressEnd}\n              className=\"w-full p-4 flex items-center gap-3 border-b border-border hover-elevate active-elevate-2 text-left\"\n            >\n              <Avatar className=\"h-12 w-12\">\n                <AvatarImage src={conversation.profilePicture || undefined} />\n                <AvatarFallback>{getInitials(conversation.displayName)}</AvatarFallback>\n              </Avatar>\n\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center justify-between gap-2\">\n                  <h3 className=\"text-base font-semibold truncate\">\n                    {conversation.displayName}\n                  </h3>\n                  {conversation.lastMessageTime && (\n                    <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n                      {formatTime(conversation.lastMessageTime)}\n                    </span>\n                  )}\n                </div>\n\n                <div className=\"flex items-center justify-between gap-2 mt-1\">\n                  <p className=\"text-sm text-muted-foreground truncate\">\n                    {conversation.lastMessage || \"No messages yet\"}\n                  </p>\n                  {conversation.unreadCount > 0 && (\n                    <Badge\n                      variant=\"default\"\n                      className=\"h-5 min-w-5 px-1.5 text-xs rounded-full\"\n                      data-testid={`unread-count-${conversation.userId}`}\n                    >\n                      {conversation.unreadCount}\n                    </Badge>\n                  )}\n                </div>\n\n                <p className=\"text-xs text-muted-foreground font-mono mt-0.5\">\n                  @{conversation.username}\n                </p>\n              </div>\n            </button>\n\n            <AnimatePresence>\n              {longPressedUserId === conversation.userId && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  exit={{ opacity: 0, scale: 0.8 }}\n                  transition={{ duration: 0.15 }}\n                  className=\"absolute right-2 top-1/2 -translate-y-1/2 z-10\"\n                >\n                  <Button\n                    variant=\"destructive\"\n                    size=\"icon\"\n                    data-testid={`button-delete-chat-${conversation.userId}`}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setUserToDelete(conversation.userId);\n                      setShowDeleteDialog(true);\n                    }}\n                    className=\"h-9 w-9 rounded-full\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </motion.div>\n        ))}\n      </div>\n\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete conversation?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will permanently delete all messages with{\" \"}\n              {conversations.find((c) => c.userId === userToDelete)?.displayName}.\n              This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => setLongPressedUserId(null)}>\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                if (userToDelete !== null) {\n                  deleteChatMutation.mutate(userToDelete);\n                  setLongPressedUserId(null);\n                  setUserToDelete(null);\n                }\n              }}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":9336},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { motion } from \"framer-motion\";\nimport { Lock, User, UserPlus, Copy, Check, AlertTriangle, KeyRound, Key } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { generateKeyPair, saveKeysToStorage, getKeysFromStorage } from \"@/lib/crypto\";\nimport { createRecoveryInfo, decryptPrivateKeyWithPassphrase, validatePassphrase } from \"@/lib/recovery-crypto\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = loginSchema.extend({\n  displayName: z.string().min(1, \"Display name is required\"),\n});\n\nconst recoverySchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  passphrase: z.string().min(1, \"Recovery passphrase is required\"),\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\ntype RecoveryForm = z.infer<typeof recoverySchema>;\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const [mode, setMode] = useState<\"login\" | \"register\" | \"recover\">(\"login\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassphrase, setShowPassphrase] = useState(false);\n  const [recoveryPassphrase, setRecoveryPassphrase] = useState(\"\");\n  const [registrationData, setRegistrationData] = useState<any>(null);\n  const [confirmWritten, setConfirmWritten] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const { toast } = useToast();\n  const { login } = useAuth();\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: { username: \"\", password: \"\" },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: { username: \"\", password: \"\", displayName: \"\" },\n  });\n\n  const recoveryForm = useForm<RecoveryForm>({\n    resolver: zodResolver(recoverySchema),\n    defaultValues: { username: \"\", passphrase: \"\", newPassword: \"\" },\n  });\n\n  const onLogin = async (data: LoginForm) => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest<{ user: any; token: string }>(\n        \"POST\",\n        \"/api/auth/login\",\n        data\n      );\n\n      const keys = getKeysFromStorage(response.user.username);\n      \n      if (!keys) {\n        toast({\n          title: \"Login failed\",\n          description: \"Encryption keys not found. Please register a new account.\",\n          variant: \"destructive\",\n        });\n        setIsLoading(false);\n        return;\n      }\n\n      login(response.user, response.token, keys);\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onRegister = async (data: RegisterForm) => {\n    setIsLoading(true);\n    try {\n      const keys = await generateKeyPair();\n      const recoveryInfo = await createRecoveryInfo(keys.privateKey);\n\n      setRecoveryPassphrase(recoveryInfo.passphrase);\n      setRegistrationData({\n        ...data,\n        keys,\n        encryptedPrivateKey: recoveryInfo.encryptedPrivateKey,\n      });\n      setShowPassphrase(true);\n    } catch (error: any) {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Failed to generate recovery keys\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const completeRegistration = async () => {\n    if (!confirmWritten || !registrationData) return;\n\n    setIsLoading(true);\n    try {\n      const response = await apiRequest<{ user: any; token: string }>(\n        \"POST\",\n        \"/api/auth/register\",\n        {\n          username: registrationData.username,\n          password: registrationData.password,\n          displayName: registrationData.displayName,\n          publicKey: registrationData.keys.publicKey,\n          encryptedPrivateKey: registrationData.encryptedPrivateKey,\n        }\n      );\n\n      saveKeysToStorage(registrationData.username, registrationData.keys);\n      login(response.user, response.token, registrationData.keys);\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Username already exists\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onRecover = async (data: RecoveryForm) => {\n    setIsLoading(true);\n    try {\n      if (!validatePassphrase(data.passphrase)) {\n        toast({\n          title: \"Invalid passphrase\",\n          description: \"Please enter a valid 12-word recovery passphrase\",\n          variant: \"destructive\",\n        });\n        setIsLoading(false);\n        return;\n      }\n\n      const response = await apiRequest<{ \n        encryptedPrivateKey: string;\n        user: any;\n        token: string;\n      }>(\n        \"POST\",\n        \"/api/auth/recover\",\n        { \n          username: data.username,\n          newPassword: data.newPassword\n        }\n      );\n\n      const privateKey = await decryptPrivateKeyWithPassphrase(\n        response.encryptedPrivateKey,\n        data.passphrase\n      );\n\n      const keys = { privateKey, publicKey: response.user.publicKey };\n      saveKeysToStorage(data.username, keys);\n      login(response.user, response.token, keys);\n      \n      toast({\n        title: \"Account recovered successfully\",\n        description: \"Your encryption keys and password have been restored\",\n      });\n      \n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Recovery failed\",\n        description: error.message || \"Unable to recover account. Please check your username and passphrase.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const copyPassphrase = () => {\n    navigator.clipboard.writeText(recoveryPassphrase);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Make sure to write it down on paper as well\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"w-full max-w-md\"\n      >\n        {showPassphrase ? (\n          <Card>\n            <CardHeader className=\"space-y-1 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <div className=\"h-12 w-12 rounded-lg bg-destructive flex items-center justify-center\">\n                  <KeyRound className=\"h-6 w-6 text-destructive-foreground\" />\n                </div>\n              </div>\n              <CardTitle className=\"text-2xl font-bold\">Recovery Passphrase</CardTitle>\n              <CardDescription>\n                Write this down on paper and keep it safe\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-4 bg-destructive/10 border-2 border-destructive rounded-md\">\n                <div className=\"flex items-start gap-3 mb-3\">\n                  <AlertTriangle className=\"h-5 w-5 text-destructive flex-shrink-0 mt-0.5\" />\n                  <div className=\"text-sm text-destructive space-y-1\">\n                    <p className=\"font-semibold\">Critical: This is your only way to recover access</p>\n                    <p>If you forget your password, this passphrase is the ONLY way to recover your encryption keys and messages.</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"p-4 bg-muted rounded-md border-2 border-border\">\n                  <p className=\"text-sm font-mono text-foreground break-words leading-relaxed\">\n                    {recoveryPassphrase}\n                  </p>\n                </div>\n\n                <Button\n                  onClick={copyPassphrase}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  data-testid=\"button-copy-passphrase\"\n                >\n                  {copied ? (\n                    <>\n                      <Check className=\"h-4 w-4 mr-2\" />\n                      Copied!\n                    </>\n                  ) : (\n                    <>\n                      <Copy className=\"h-4 w-4 mr-2\" />\n                      Copy to Clipboard\n                    </>\n                  )}\n                </Button>\n              </div>\n\n              <div className=\"flex items-start gap-3 p-3 bg-muted rounded-md\">\n                <Checkbox\n                  id=\"confirm-written\"\n                  data-testid=\"checkbox-confirm\"\n                  checked={confirmWritten}\n                  onCheckedChange={(checked) => setConfirmWritten(checked as boolean)}\n                />\n                <label\n                  htmlFor=\"confirm-written\"\n                  className=\"text-sm text-foreground leading-tight cursor-pointer select-none\"\n                >\n                  I have written down my recovery passphrase on paper and stored it in a safe place\n                </label>\n              </div>\n\n              <Button\n                onClick={completeRegistration}\n                className=\"w-full h-12\"\n                disabled={!confirmWritten || isLoading}\n                data-testid=\"button-complete-registration\"\n              >\n                {isLoading ? \"Creating account...\" : \"Continue\"}\n              </Button>\n\n              <Button\n                onClick={() => {\n                  setShowPassphrase(false);\n                  setConfirmWritten(false);\n                  setCopied(false);\n                }}\n                variant=\"ghost\"\n                className=\"w-full\"\n                data-testid=\"button-back\"\n              >\n                Go Back\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card>\n            <CardHeader className=\"space-y-1 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <div className=\"h-12 w-12 rounded-lg bg-primary flex items-center justify-center\">\n                  <Lock className=\"h-6 w-6 text-primary-foreground\" />\n                </div>\n              </div>\n              <CardTitle className=\"text-2xl font-bold\">Archer</CardTitle>\n              <CardDescription>\n                {mode === \"register\"\n                  ? \"Create your encrypted account\"\n                  : mode === \"recover\"\n                  ? \"Recover your account\"\n                  : \"Sign in to your encrypted chats\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n            {mode === \"register\" ? (\n              <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-username\">Username</Label>\n                  <Input\n                    id=\"register-username\"\n                    data-testid=\"input-username\"\n                    placeholder=\"johndoe\"\n                    {...registerForm.register(\"username\")}\n                    className=\"h-12\"\n                  />\n                  {registerForm.formState.errors.username && (\n                    <p className=\"text-sm text-destructive\">\n                      {registerForm.formState.errors.username.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-displayName\">Display Name</Label>\n                  <Input\n                    id=\"register-displayName\"\n                    data-testid=\"input-displayname\"\n                    placeholder=\"John Doe\"\n                    {...registerForm.register(\"displayName\")}\n                    className=\"h-12\"\n                  />\n                  {registerForm.formState.errors.displayName && (\n                    <p className=\"text-sm text-destructive\">\n                      {registerForm.formState.errors.displayName.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-password\">Password</Label>\n                  <Input\n                    id=\"register-password\"\n                    data-testid=\"input-password\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    {...registerForm.register(\"password\")}\n                    className=\"h-12\"\n                  />\n                  {registerForm.formState.errors.password && (\n                    <p className=\"text-sm text-destructive\">\n                      {registerForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  data-testid=\"button-register\"\n                  className=\"w-full h-12\"\n                  disabled={isLoading}\n                >\n                  <UserPlus className=\"h-4 w-4 mr-2\" />\n                  {isLoading ? \"Creating account...\" : \"Create Account\"}\n                </Button>\n              </form>\n            ) : mode === \"recover\" ? (\n              <form onSubmit={recoveryForm.handleSubmit(onRecover)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"recover-username\">Username</Label>\n                  <Input\n                    id=\"recover-username\"\n                    data-testid=\"input-username\"\n                    placeholder=\"johndoe\"\n                    {...recoveryForm.register(\"username\")}\n                    className=\"h-12\"\n                  />\n                  {recoveryForm.formState.errors.username && (\n                    <p className=\"text-sm text-destructive\">\n                      {recoveryForm.formState.errors.username.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"recover-passphrase\">Recovery Passphrase</Label>\n                  <Textarea\n                    id=\"recover-passphrase\"\n                    data-testid=\"input-passphrase\"\n                    placeholder=\"Enter your 12-word recovery passphrase\"\n                    {...recoveryForm.register(\"passphrase\")}\n                    className=\"min-h-[100px] font-mono text-sm\"\n                  />\n                  {recoveryForm.formState.errors.passphrase && (\n                    <p className=\"text-sm text-destructive\">\n                      {recoveryForm.formState.errors.passphrase.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"recover-newPassword\">New Password</Label>\n                  <Input\n                    id=\"recover-newPassword\"\n                    data-testid=\"input-new-password\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    {...recoveryForm.register(\"newPassword\")}\n                    className=\"h-12\"\n                  />\n                  {recoveryForm.formState.errors.newPassword && (\n                    <p className=\"text-sm text-destructive\">\n                      {recoveryForm.formState.errors.newPassword.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  data-testid=\"button-recover\"\n                  className=\"w-full h-12\"\n                  disabled={isLoading}\n                >\n                  <Key className=\"h-4 w-4 mr-2\" />\n                  {isLoading ? \"Recovering account...\" : \"Recover Account\"}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-username\">Username</Label>\n                  <Input\n                    id=\"login-username\"\n                    data-testid=\"input-username\"\n                    placeholder=\"johndoe\"\n                    {...loginForm.register(\"username\")}\n                    className=\"h-12\"\n                  />\n                  {loginForm.formState.errors.username && (\n                    <p className=\"text-sm text-destructive\">\n                      {loginForm.formState.errors.username.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-password\">Password</Label>\n                  <Input\n                    id=\"login-password\"\n                    data-testid=\"input-password\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    {...loginForm.register(\"password\")}\n                    className=\"h-12\"\n                  />\n                  {loginForm.formState.errors.password && (\n                    <p className=\"text-sm text-destructive\">\n                      {loginForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  data-testid=\"button-login\"\n                  className=\"w-full h-12\"\n                  disabled={isLoading}\n                >\n                  <User className=\"h-4 w-4 mr-2\" />\n                  {isLoading ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n            )}\n\n            <div className=\"mt-6 space-y-2 text-center\">\n              {mode === \"login\" ? (\n                <>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    data-testid=\"button-toggle-register\"\n                    onClick={() => setMode(\"register\")}\n                    className=\"text-sm w-full\"\n                  >\n                    Don't have an account? Register\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    data-testid=\"button-toggle-recover\"\n                    onClick={() => setMode(\"recover\")}\n                    className=\"text-sm w-full\"\n                  >\n                    Forgot password? Recover account\n                  </Button>\n                </>\n              ) : mode === \"register\" ? (\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  data-testid=\"button-toggle-login\"\n                  onClick={() => setMode(\"login\")}\n                  className=\"text-sm w-full\"\n                >\n                  Already have an account? Sign in\n                </Button>\n              ) : (\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  data-testid=\"button-toggle-login\"\n                  onClick={() => setMode(\"login\")}\n                  className=\"text-sm w-full\"\n                >\n                  Back to sign in\n                </Button>\n              )}\n            </div>\n\n            <div className=\"mt-6 p-3 bg-muted rounded-md\">\n              <p className=\"text-xs text-muted-foreground text-center\">\n                <Lock className=\"h-3 w-3 inline mr-1\" />\n                End-to-end encrypted. Your keys never leave your device.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        )}\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":20638},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/conversation-view.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ArrowLeft, Info, Lock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { decryptMessage } from \"@/lib/crypto\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type Message, type SafeUser, type DecryptedMessage } from \"@shared/schema\";\nimport { MessageBubble } from \"@/components/message-bubble\";\nimport { MessageInput } from \"@/components/message-input\";\n\ninterface ConversationViewProps {\n  userId: number;\n  onViewProfile: (userId: number) => void;\n  onBack: () => void;\n}\n\nexport function ConversationView({ userId, onViewProfile, onBack }: ConversationViewProps) {\n  const { user: currentUser, keyPair } = useAuth();\n  const { toast } = useToast();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [decryptedMessages, setDecryptedMessages] = useState<DecryptedMessage[]>([]);\n\n  useEffect(() => {\n    setDecryptedMessages([]);\n  }, [userId]);\n\n  const { data: otherUser, isLoading: userLoading } = useQuery<SafeUser>({\n    queryKey: [\"/api/users\", userId],\n  });\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery<Message[]>({\n    queryKey: [\"/api/messages\", userId],\n  });\n\n  const deleteMessageMutation = useMutation({\n    mutationFn: async (messageId: number) => {\n      await apiRequest(\"DELETE\", `/api/messages/${messageId}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\", userId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      toast({ title: \"Message deleted\" });\n    },\n  });\n\n  const deleteMessagesMutation = useMutation({\n    mutationFn: async (messageIds: number[]) => {\n      await apiRequest(\"POST\", \"/api/messages/delete-bulk\", { messageIds });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\", userId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      toast({ title: \"Messages deleted\" });\n    },\n  });\n\n  useEffect(() => {\n    if (messages.length > 0 && keyPair && currentUser) {\n      const decrypt = async () => {\n        const decrypted: DecryptedMessage[] = [];\n\n        for (const message of messages) {\n          if (message.deleted) {\n            decrypted.push({ ...message, content: \"[Message deleted]\" });\n            continue;\n          }\n\n          try {\n            const isSender = message.senderId === currentUser.id;\n            const encryptedKey = isSender ? message.senderEncryptedKey : message.recipientEncryptedKey;\n            const content = await decryptMessage(message.encryptedContent, encryptedKey, message.iv, keyPair.privateKey);\n            decrypted.push({ ...message, content });\n          } catch (error) {\n            decrypted.push({ ...message, content: \"[Failed to decrypt]\" });\n          }\n        }\n\n        setDecryptedMessages(decrypted);\n      };\n\n      decrypt();\n    }\n  }, [messages, keyPair, currentUser]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [decryptedMessages]);\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const groupMessages = (messages: DecryptedMessage[]) => {\n    const groups: DecryptedMessage[][] = [];\n    let currentGroup: DecryptedMessage[] = [];\n\n    messages.forEach((message, index) => {\n      if (index === 0) {\n        currentGroup.push(message);\n        return;\n      }\n\n      const prevMessage = messages[index - 1];\n      const timeDiff = Math.abs(\n        new Date(message.timestamp).getTime() - new Date(prevMessage.timestamp).getTime()\n      );\n      const isSameSender = message.senderId === prevMessage.senderId;\n      const withinTwoMinutes = timeDiff < 2 * 60 * 1000;\n\n      if (isSameSender && withinTwoMinutes) {\n        currentGroup.push(message);\n      } else {\n        groups.push([...currentGroup]);\n        currentGroup = [message];\n      }\n    });\n\n    if (currentGroup.length > 0) {\n      groups.push(currentGroup);\n    }\n\n    return groups;\n  };\n\n  if (userLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col\">\n        <div className=\"h-14 px-4 flex items-center gap-3 border-b border-border bg-card\">\n          <Skeleton className=\"h-10 w-10 rounded-full\" />\n          <div className=\"flex-1\">\n            <Skeleton className=\"h-4 w-32 mb-1\" />\n            <Skeleton className=\"h-3 w-24\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!otherUser) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">User not found</p>\n      </div>\n    );\n  }\n\n  const messageGroups = groupMessages(decryptedMessages);\n\n  return (\n    <div className=\"flex-1 flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"h-14 px-4 flex items-center justify-between border-b border-border bg-card\">\n        <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            data-testid=\"button-back\"\n            onClick={onBack}\n            className=\"lg:hidden\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n\n          <Avatar className=\"h-10 w-10\" data-testid={`avatar-user-${userId}`}>\n            <AvatarImage src={otherUser.profilePicture || undefined} />\n            <AvatarFallback>{getInitials(otherUser.displayName)}</AvatarFallback>\n          </Avatar>\n\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"font-semibold truncate\" data-testid=\"text-chat-name\">\n              {otherUser.displayName}\n            </h2>\n            <p className=\"text-xs text-muted-foreground flex items-center gap-1\">\n              <Lock className=\"h-3 w-3\" />\n              End-to-end encrypted\n            </p>\n          </div>\n        </div>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          data-testid=\"button-view-profile\"\n          onClick={() => onViewProfile(userId)}\n        >\n          <Info className=\"h-5 w-5\" />\n        </Button>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messagesLoading ? (\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className={i % 2 === 0 ? \"flex justify-end\" : \"\"}>\n                <Skeleton className=\"h-12 w-64 rounded-2xl\" />\n              </div>\n            ))}\n          </div>\n        ) : messageGroups.length === 0 ? (\n          <div className=\"flex-1 flex items-center justify-center text-muted-foreground\">\n            <div className=\"text-center\">\n              <Lock className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n              <p>No messages yet</p>\n              <p className=\"text-sm mt-1\">Send your first encrypted message</p>\n            </div>\n          </div>\n        ) : (\n          <AnimatePresence initial={false}>\n            {messageGroups.map((group, groupIndex) => (\n              <div key={groupIndex} className=\"space-y-1\">\n                {group.map((message, messageIndex) => (\n                  <MessageBubble\n                    key={message.id}\n                    message={message}\n                    isOwn={message.senderId === currentUser?.id}\n                    isFirst={messageIndex === 0}\n                    isLast={messageIndex === group.length - 1}\n                    onDelete={() => deleteMessageMutation.mutate(message.id)}\n                    currentUserId={currentUser?.id || 0}\n                  />\n                ))}\n              </div>\n            ))}\n          </AnimatePresence>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input */}\n      <MessageInput recipientId={userId} recipientPublicKey={otherUser.publicKey} />\n    </div>\n  );\n}\n","size_bytes":8260},"client/src/components/settings-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Settings, Lock, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { changePasswordSchema, type ChangePassword } from \"@shared/schema\";\n\nexport function SettingsDialog() {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<ChangePassword>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: ChangePassword) => {\n      return apiRequest(\"POST\", \"/api/auth/change-password\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password changed\",\n        description: \"Your password has been changed successfully\",\n      });\n      form.reset();\n      setOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to change password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ChangePassword) => {\n    changePasswordMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-settings\">\n          <Settings className=\"h-5 w-5\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-settings\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Lock className=\"h-5 w-5\" />\n            Change Password\n          </DialogTitle>\n          <DialogDescription>\n            Update your password to keep your account secure\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"currentPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Current Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"Enter current password\"\n                      data-testid=\"input-current-password\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"newPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>New Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"Enter new password (min. 6 characters)\"\n                      data-testid=\"input-new-password\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirm New Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"Confirm new password\"\n                      data-testid=\"input-confirm-password\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-3 pt-2\">\n              <Button\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => {\n                  form.reset();\n                  setOpen(false);\n                }}\n                data-testid=\"button-cancel-password-change\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={changePasswordMutation.isPending}\n                data-testid=\"button-submit-password-change\"\n              >\n                {changePasswordMutation.isPending ? \"Changing...\" : \"Change Password\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5126},"client/src/lib/recovery-crypto.ts":{"content":"import { arrayBufferToBase64, base64ToArrayBuffer } from \"./crypto\";\n\n// BIP39-like word list (2048 words)\nconst WORD_LIST = [\n  \"abandon\", \"ability\", \"able\", \"about\", \"above\", \"absent\", \"absorb\", \"abstract\", \"absurd\", \"abuse\", \"access\", \"accident\",\n  \"account\", \"accuse\", \"achieve\", \"acid\", \"acoustic\", \"acquire\", \"across\", \"act\", \"action\", \"actor\", \"actress\", \"actual\",\n  \"adapt\", \"add\", \"addict\", \"address\", \"adjust\", \"admit\", \"adult\", \"advance\", \"advice\", \"aerobic\", \"affair\", \"afford\",\n  \"afraid\", \"again\", \"age\", \"agent\", \"agree\", \"ahead\", \"aim\", \"air\", \"airport\", \"aisle\", \"alarm\", \"album\", \"alcohol\",\n  \"alert\", \"alien\", \"all\", \"alley\", \"allow\", \"almost\", \"alone\", \"alpha\", \"already\", \"also\", \"alter\", \"always\", \"amateur\",\n  \"amazing\", \"among\", \"amount\", \"amused\", \"analyst\", \"anchor\", \"ancient\", \"anger\", \"angle\", \"angry\", \"animal\", \"ankle\",\n  \"announce\", \"annual\", \"another\", \"answer\", \"antenna\", \"antique\", \"anxiety\", \"any\", \"apart\", \"apology\", \"appear\", \"apple\",\n  \"approve\", \"april\", \"arch\", \"arctic\", \"area\", \"arena\", \"argue\", \"arm\", \"armed\", \"armor\", \"army\", \"around\", \"arrange\",\n  \"arrest\", \"arrive\", \"arrow\", \"art\", \"artefact\", \"artist\", \"artwork\", \"ask\", \"aspect\", \"assault\", \"asset\", \"assist\",\n  \"assume\", \"asthma\", \"athlete\", \"atom\", \"attack\", \"attend\", \"attitude\", \"attract\", \"auction\", \"audit\", \"august\", \"aunt\",\n  \"author\", \"auto\", \"autumn\", \"average\", \"avocado\", \"avoid\", \"awake\", \"aware\", \"away\", \"awesome\", \"awful\", \"awkward\",\n  \"axis\", \"baby\", \"bachelor\", \"bacon\", \"badge\", \"bag\", \"balance\", \"balcony\", \"ball\", \"bamboo\", \"banana\", \"banner\",\n  \"bar\", \"barely\", \"bargain\", \"barrel\", \"base\", \"basic\", \"basket\", \"battle\", \"beach\", \"bean\", \"beauty\", \"because\",\n  \"become\", \"beef\", \"before\", \"begin\", \"behave\", \"behind\", \"believe\", \"below\", \"belt\", \"bench\", \"benefit\", \"best\",\n  \"betray\", \"better\", \"between\", \"beyond\", \"bicycle\", \"bid\", \"bike\", \"bind\", \"biology\", \"bird\", \"birth\", \"bitter\",\n  \"black\", \"blade\", \"blame\", \"blanket\", \"blast\", \"bleak\", \"bless\", \"blind\", \"blood\", \"blossom\", \"blouse\", \"blue\",\n  \"blur\", \"blush\", \"board\", \"boat\", \"body\", \"boil\", \"bomb\", \"bone\", \"bonus\", \"book\", \"boost\", \"border\", \"boring\",\n  \"borrow\", \"boss\", \"bottom\", \"bounce\", \"box\", \"boy\", \"bracket\", \"brain\", \"brand\", \"brass\", \"brave\", \"bread\",\n  \"breeze\", \"brick\", \"bridge\", \"brief\", \"bright\", \"bring\", \"brisk\", \"broccoli\", \"broken\", \"bronze\", \"broom\", \"brother\",\n  \"brown\", \"brush\", \"bubble\", \"buddy\", \"budget\", \"buffalo\", \"build\", \"bulb\", \"bulk\", \"bullet\", \"bundle\", \"bunker\",\n  \"burden\", \"burger\", \"burst\", \"bus\", \"business\", \"busy\", \"butter\", \"buyer\", \"buzz\", \"cabbage\", \"cabin\", \"cable\",\n  \"cactus\", \"cage\", \"cake\", \"call\", \"calm\", \"camera\", \"camp\", \"can\", \"canal\", \"cancel\", \"candy\", \"cannon\",\n  \"canoe\", \"canvas\", \"canyon\", \"capable\", \"capital\", \"captain\", \"car\", \"carbon\", \"card\", \"cargo\", \"carpet\", \"carry\",\n  \"cart\", \"case\", \"cash\", \"casino\", \"castle\", \"casual\", \"cat\", \"catalog\", \"catch\", \"category\", \"cattle\", \"caught\",\n  \"cause\", \"caution\", \"cave\", \"ceiling\", \"celery\", \"cement\", \"census\", \"century\", \"cereal\", \"certain\", \"chair\", \"chalk\",\n  \"champion\", \"change\", \"chaos\", \"chapter\", \"charge\", \"chase\", \"chat\", \"cheap\", \"check\", \"cheese\", \"chef\", \"cherry\",\n  \"chest\", \"chicken\", \"chief\", \"child\", \"chimney\", \"choice\", \"choose\", \"chronic\", \"chuckle\", \"chunk\", \"churn\", \"cigar\",\n  \"cinnamon\", \"circle\", \"citizen\", \"city\", \"civil\", \"claim\", \"clap\", \"clarify\", \"claw\", \"clay\", \"clean\", \"clerk\",\n  \"clever\", \"click\", \"client\", \"cliff\", \"climb\", \"clinic\", \"clip\", \"clock\", \"clog\", \"close\", \"cloth\", \"cloud\",\n  \"clown\", \"club\", \"clump\", \"cluster\", \"clutch\", \"coach\", \"coast\", \"coconut\", \"code\", \"coffee\", \"coil\", \"coin\",\n  \"collect\", \"color\", \"column\", \"combine\", \"come\", \"comfort\", \"comic\", \"common\", \"company\", \"concert\", \"conduct\", \"confirm\",\n  \"congress\", \"connect\", \"consider\", \"control\", \"convince\", \"cook\", \"cool\", \"copper\", \"copy\", \"coral\", \"core\", \"corn\",\n  \"correct\", \"cost\", \"cotton\", \"couch\", \"country\", \"couple\", \"course\", \"cousin\", \"cover\", \"coyote\", \"crack\", \"cradle\",\n  \"craft\", \"cram\", \"crane\", \"crash\", \"crater\", \"crawl\", \"crazy\", \"cream\", \"credit\", \"creek\", \"crew\", \"cricket\",\n  \"crime\", \"crisp\", \"critic\", \"crop\", \"cross\", \"crouch\", \"crowd\", \"crucial\", \"cruel\", \"cruise\", \"crumble\", \"crunch\",\n  \"crush\", \"cry\", \"crystal\", \"cube\", \"culture\", \"cup\", \"cupboard\", \"curious\", \"current\", \"curtain\", \"curve\", \"cushion\",\n  \"custom\", \"cute\", \"cycle\", \"dad\", \"damage\", \"damp\", \"dance\", \"danger\", \"daring\", \"dash\", \"daughter\", \"dawn\",\n  \"day\", \"deal\", \"debate\", \"debris\", \"decade\", \"december\", \"decide\", \"decline\", \"decorate\", \"decrease\", \"deer\", \"define\",\n  \"defy\", \"degree\", \"delay\", \"deliver\", \"demand\", \"demise\", \"denial\", \"dentist\", \"deny\", \"depart\", \"depend\", \"deposit\",\n  \"depth\", \"deputy\", \"derive\", \"describe\", \"desert\", \"design\", \"desk\", \"despair\", \"destroy\", \"detail\", \"detect\", \"develop\",\n  \"device\", \"devote\", \"diagram\", \"dial\", \"diamond\", \"diary\", \"dice\", \"diesel\", \"diet\", \"differ\", \"digital\", \"dignity\",\n  \"dilemma\", \"dinner\", \"dinosaur\", \"direct\", \"dirt\", \"disagree\", \"discover\", \"disease\", \"dish\", \"dismiss\", \"disorder\",\n  \"display\", \"distance\", \"divert\", \"divide\", \"divorce\", \"dizzy\", \"doctor\", \"document\", \"dog\", \"doll\", \"dolphin\", \"domain\",\n  \"donate\", \"donkey\", \"donor\", \"door\", \"dose\", \"double\", \"dove\", \"draft\", \"dragon\", \"drama\", \"drastic\", \"draw\",\n  \"dream\", \"dress\", \"drift\", \"drill\", \"drink\", \"drip\", \"drive\", \"drop\", \"drum\", \"dry\", \"duck\", \"dumb\",\n  \"dune\", \"during\", \"dust\", \"dutch\", \"duty\", \"dwarf\", \"dynamic\", \"eager\", \"eagle\", \"early\", \"earn\", \"earth\",\n  \"easily\", \"east\", \"easy\", \"echo\", \"ecology\", \"economy\", \"edge\", \"edit\", \"educate\", \"effort\", \"egg\", \"eight\",\n  \"either\", \"elbow\", \"elder\", \"electric\", \"elegant\", \"element\", \"elephant\", \"elevator\", \"elite\", \"else\", \"embark\", \"embody\",\n  \"embrace\", \"emerge\", \"emotion\", \"employ\", \"empower\", \"empty\", \"enable\", \"enact\", \"end\", \"endless\", \"endorse\", \"enemy\",\n  \"energy\", \"enforce\", \"engage\", \"engine\", \"enhance\", \"enjoy\", \"enlist\", \"enough\", \"enrich\", \"enroll\", \"ensure\", \"enter\",\n  \"entire\", \"entry\", \"envelope\", \"episode\", \"equal\", \"equip\", \"era\", \"erase\", \"erode\", \"erosion\", \"error\", \"erupt\",\n  \"escape\", \"essay\", \"essence\", \"estate\", \"eternal\", \"ethics\", \"evidence\", \"evil\", \"evoke\", \"evolve\", \"exact\", \"example\",\n  \"excess\", \"exchange\", \"excite\", \"exclude\", \"excuse\", \"execute\", \"exercise\", \"exhaust\", \"exhibit\", \"exile\", \"exist\", \"exit\",\n  \"exotic\", \"expand\", \"expect\", \"expire\", \"explain\", \"expose\", \"express\", \"extend\", \"extra\", \"eye\", \"eyebrow\", \"fabric\",\n  \"face\", \"faculty\", \"fade\", \"faint\", \"faith\", \"fall\", \"false\", \"fame\", \"family\", \"famous\", \"fan\", \"fancy\",\n  \"fantasy\", \"farm\", \"fashion\", \"fat\", \"fatal\", \"father\", \"fatigue\", \"fault\", \"favorite\", \"feature\", \"february\", \"federal\",\n  \"fee\", \"feed\", \"feel\", \"female\", \"fence\", \"festival\", \"fetch\", \"fever\", \"few\", \"fiber\", \"fiction\", \"field\",\n  \"figure\", \"file\", \"film\", \"filter\", \"final\", \"find\", \"fine\", \"finger\", \"finish\", \"fire\", \"firm\", \"first\",\n  \"fiscal\", \"fish\", \"fit\", \"fitness\", \"fix\", \"flag\", \"flame\", \"flash\", \"flat\", \"flavor\", \"flee\", \"flight\",\n  \"flip\", \"float\", \"flock\", \"floor\", \"flower\", \"fluid\", \"flush\", \"fly\", \"foam\", \"focus\", \"fog\", \"foil\",\n  \"fold\", \"follow\", \"food\", \"foot\", \"force\", \"forest\", \"forget\", \"fork\", \"fortune\", \"forum\", \"forward\", \"fossil\",\n  \"foster\", \"found\", \"fox\", \"fragile\", \"frame\", \"frequent\", \"fresh\", \"friend\", \"fringe\", \"frog\", \"front\", \"frost\",\n  \"frown\", \"frozen\", \"fruit\", \"fuel\", \"fun\", \"funny\", \"furnace\", \"fury\", \"future\", \"gadget\", \"gain\", \"galaxy\",\n  \"gallery\", \"game\", \"gap\", \"garage\", \"garbage\", \"garden\", \"garlic\", \"garment\", \"gas\", \"gasp\", \"gate\", \"gather\",\n  \"gauge\", \"gaze\", \"general\", \"genius\", \"genre\", \"gentle\", \"genuine\", \"gesture\", \"ghost\", \"giant\", \"gift\", \"giggle\",\n  \"ginger\", \"giraffe\", \"girl\", \"give\", \"glad\", \"glance\", \"glare\", \"glass\", \"glide\", \"glimpse\", \"globe\", \"gloom\",\n  \"glory\", \"glove\", \"glow\", \"glue\", \"goat\", \"goddess\", \"gold\", \"good\", \"goose\", \"gorilla\", \"gospel\", \"gossip\",\n  \"govern\", \"gown\", \"grab\", \"grace\", \"grain\", \"grant\", \"grape\", \"grass\", \"gravity\", \"great\", \"green\", \"grid\",\n  \"grief\", \"grit\", \"grocery\", \"group\", \"grow\", \"grunt\", \"guard\", \"guess\", \"guide\", \"guilt\", \"guitar\", \"gun\",\n  \"gym\", \"habit\", \"hair\", \"half\", \"hammer\", \"hamster\", \"hand\", \"happy\", \"harbor\", \"hard\", \"harsh\", \"harvest\",\n  \"hat\", \"have\", \"hawk\", \"hazard\", \"head\", \"health\", \"heart\", \"heavy\", \"hedgehog\", \"height\", \"hello\", \"helmet\",\n  \"help\", \"hen\", \"hero\", \"hidden\", \"high\", \"hill\", \"hint\", \"hip\", \"hire\", \"history\", \"hobby\", \"hockey\",\n  \"hold\", \"hole\", \"holiday\", \"hollow\", \"home\", \"honey\", \"hood\", \"hope\", \"horn\", \"horror\", \"horse\", \"hospital\",\n  \"host\", \"hotel\", \"hour\", \"hover\", \"hub\", \"huge\", \"human\", \"humble\", \"humor\", \"hundred\", \"hungry\", \"hunt\",\n  \"hurdle\", \"hurry\", \"hurt\", \"husband\", \"hybrid\", \"ice\", \"icon\", \"idea\", \"identify\", \"idle\", \"ignore\", \"ill\",\n  \"illegal\", \"illness\", \"image\", \"imitate\", \"immense\", \"immune\", \"impact\", \"impose\", \"improve\", \"impulse\", \"inch\", \"include\",\n  \"income\", \"increase\", \"index\", \"indicate\", \"indoor\", \"industry\", \"infant\", \"inflict\", \"inform\", \"inhale\", \"inherit\", \"initial\",\n  \"inject\", \"injury\", \"inmate\", \"inner\", \"innocent\", \"input\", \"inquiry\", \"insane\", \"insect\", \"inside\", \"inspire\", \"install\",\n  \"intact\", \"interest\", \"into\", \"invest\", \"invite\", \"involve\", \"iron\", \"island\", \"isolate\", \"issue\", \"item\", \"ivory\",\n  \"jacket\", \"jaguar\", \"jar\", \"jazz\", \"jealous\", \"jeans\", \"jelly\", \"jewel\", \"job\", \"join\", \"joke\", \"journey\",\n  \"judge\", \"juice\", \"jump\", \"jungle\", \"junior\", \"junk\", \"just\", \"kangaroo\", \"keen\", \"keep\", \"ketchup\", \"key\",\n  \"kick\", \"kid\", \"kidney\", \"kind\", \"kingdom\", \"kiss\", \"kit\", \"kitchen\", \"kite\", \"kitten\", \"kiwi\", \"knee\",\n  \"knife\", \"knock\", \"know\", \"lab\", \"label\", \"labor\", \"ladder\", \"lady\", \"lake\", \"lamp\", \"language\", \"laptop\",\n  \"large\", \"later\", \"latin\", \"laugh\", \"laundry\", \"lava\", \"law\", \"lawn\", \"lawsuit\", \"layer\", \"lazy\", \"leader\",\n  \"leaf\", \"learn\", \"leave\", \"lecture\", \"left\", \"leg\", \"legal\", \"legend\", \"leisure\", \"lemon\", \"lend\", \"length\",\n  \"lens\", \"leopard\", \"lesson\", \"letter\", \"level\", \"liar\", \"liberty\", \"library\", \"license\", \"life\", \"lift\", \"light\",\n  \"like\", \"limb\", \"limit\", \"link\", \"lion\", \"liquid\", \"list\", \"little\", \"live\", \"lizard\", \"load\", \"loan\",\n  \"lobster\", \"local\", \"lock\", \"logic\", \"lonely\", \"long\", \"loop\", \"lottery\", \"loud\", \"lounge\", \"love\", \"loyal\",\n  \"lucky\", \"luggage\", \"lumber\", \"lunar\", \"lunch\", \"luxury\", \"lyrics\", \"machine\", \"mad\", \"magic\", \"magnet\", \"maid\",\n  \"mail\", \"main\", \"major\", \"make\", \"mammal\", \"man\", \"manage\", \"mandate\", \"mango\", \"mansion\", \"manual\", \"maple\",\n  \"marble\", \"march\", \"margin\", \"marine\", \"market\", \"marriage\", \"mask\", \"mass\", \"master\", \"match\", \"material\", \"math\",\n  \"matrix\", \"matter\", \"maximum\", \"maze\", \"meadow\", \"mean\", \"measure\", \"meat\", \"mechanic\", \"medal\", \"media\", \"melody\",\n  \"melt\", \"member\", \"memory\", \"mention\", \"menu\", \"mercy\", \"merge\", \"merit\", \"merry\", \"mesh\", \"message\", \"metal\",\n  \"method\", \"middle\", \"midnight\", \"milk\", \"million\", \"mimic\", \"mind\", \"minimum\", \"minor\", \"minute\", \"miracle\", \"mirror\",\n  \"misery\", \"miss\", \"mistake\", \"mix\", \"mixed\", \"mixture\", \"mobile\", \"model\", \"modify\", \"mom\", \"moment\", \"monitor\",\n  \"monkey\", \"monster\", \"month\", \"moon\", \"moral\", \"more\", \"morning\", \"mosquito\", \"mother\", \"motion\", \"motor\", \"mountain\",\n  \"mouse\", \"move\", \"movie\", \"much\", \"muffin\", \"mule\", \"multiply\", \"muscle\", \"museum\", \"mushroom\", \"music\", \"must\",\n  \"mutual\", \"myself\", \"mystery\", \"myth\", \"naive\", \"name\", \"napkin\", \"narrow\", \"nasty\", \"nation\", \"nature\", \"near\",\n  \"neck\", \"need\", \"negative\", \"neglect\", \"neither\", \"nephew\", \"nerve\", \"nest\", \"net\", \"network\", \"neutral\", \"never\",\n  \"news\", \"next\", \"nice\", \"night\", \"noble\", \"noise\", \"nominee\", \"noodle\", \"normal\", \"north\", \"nose\", \"notable\",\n  \"note\", \"nothing\", \"notice\", \"novel\", \"now\", \"nuclear\", \"number\", \"nurse\", \"nut\", \"oak\", \"obey\", \"object\",\n  \"oblige\", \"obscure\", \"observe\", \"obtain\", \"obvious\", \"occur\", \"ocean\", \"october\", \"odor\", \"off\", \"offer\", \"office\",\n  \"often\", \"oil\", \"okay\", \"old\", \"olive\", \"olympic\", \"omit\", \"once\", \"one\", \"onion\", \"online\", \"only\",\n  \"open\", \"opera\", \"opinion\", \"oppose\", \"option\", \"orange\", \"orbit\", \"orchard\", \"order\", \"ordinary\", \"organ\", \"orient\",\n  \"original\", \"orphan\", \"ostrich\", \"other\", \"outdoor\", \"outer\", \"output\", \"outside\", \"oval\", \"oven\", \"over\", \"own\",\n  \"owner\", \"oxygen\", \"oyster\", \"ozone\", \"pact\", \"paddle\", \"page\", \"pair\", \"palace\", \"palm\", \"panda\", \"panel\",\n  \"panic\", \"panther\", \"paper\", \"parade\", \"parent\", \"park\", \"parrot\", \"party\", \"pass\", \"patch\", \"path\", \"patient\",\n  \"patrol\", \"pattern\", \"pause\", \"pave\", \"payment\", \"peace\", \"peanut\", \"pear\", \"peasant\", \"pelican\", \"pen\", \"penalty\",\n  \"pencil\", \"people\", \"pepper\", \"perfect\", \"permit\", \"person\", \"pet\", \"phone\", \"photo\", \"phrase\", \"physical\", \"piano\",\n  \"picnic\", \"picture\", \"piece\", \"pig\", \"pigeon\", \"pill\", \"pilot\", \"pink\", \"pioneer\", \"pipe\", \"pistol\", \"pitch\",\n  \"pizza\", \"place\", \"planet\", \"plastic\", \"plate\", \"play\", \"please\", \"pledge\", \"pluck\", \"plug\", \"plunge\", \"poem\",\n  \"poet\", \"point\", \"polar\", \"pole\", \"police\", \"pond\", \"pony\", \"pool\", \"popular\", \"portion\", \"position\", \"possible\",\n  \"post\", \"potato\", \"pottery\", \"poverty\", \"powder\", \"power\", \"practice\", \"praise\", \"predict\", \"prefer\", \"prepare\", \"present\",\n  \"pretty\", \"prevent\", \"price\", \"pride\", \"primary\", \"print\", \"priority\", \"prison\", \"private\", \"prize\", \"problem\", \"process\",\n  \"produce\", \"profit\", \"program\", \"project\", \"promote\", \"proof\", \"property\", \"prosper\", \"protect\", \"proud\", \"provide\", \"public\",\n  \"pudding\", \"pull\", \"pulp\", \"pulse\", \"pumpkin\", \"punch\", \"pupil\", \"puppy\", \"purchase\", \"pure\", \"purple\", \"purpose\",\n  \"purse\", \"push\", \"put\", \"puzzle\", \"pyramid\", \"quality\", \"quantum\", \"quarter\", \"question\", \"quick\", \"quit\", \"quiz\",\n  \"quote\", \"rabbit\", \"raccoon\", \"race\", \"rack\", \"radar\", \"radio\", \"rail\", \"rain\", \"raise\", \"rally\", \"ramp\",\n  \"ranch\", \"random\", \"range\", \"rapid\", \"rare\", \"rate\", \"rather\", \"raven\", \"raw\", \"razor\", \"ready\", \"real\",\n  \"reason\", \"rebel\", \"rebuild\", \"recall\", \"receive\", \"recipe\", \"record\", \"recycle\", \"reduce\", \"reflect\", \"reform\", \"refuse\",\n  \"region\", \"regret\", \"regular\", \"reject\", \"relax\", \"release\", \"relief\", \"rely\", \"remain\", \"remember\", \"remind\", \"remove\",\n  \"render\", \"renew\", \"rent\", \"reopen\", \"repair\", \"repeat\", \"replace\", \"report\", \"require\", \"rescue\", \"resemble\", \"resist\",\n  \"resource\", \"response\", \"result\", \"retire\", \"retreat\", \"return\", \"reunion\", \"reveal\", \"review\", \"reward\", \"rhythm\", \"rib\",\n  \"ribbon\", \"rice\", \"rich\", \"ride\", \"ridge\", \"rifle\", \"right\", \"rigid\", \"ring\", \"riot\", \"ripple\", \"risk\",\n  \"ritual\", \"rival\", \"river\", \"road\", \"roast\", \"robot\", \"robust\", \"rocket\", \"romance\", \"roof\", \"rookie\", \"room\",\n  \"rose\", \"rotate\", \"rough\", \"round\", \"route\", \"royal\", \"rubber\", \"rude\", \"rug\", \"rule\", \"run\", \"runway\",\n  \"rural\", \"sad\", \"saddle\", \"sadness\", \"safe\", \"sail\", \"salad\", \"salmon\", \"salon\", \"salt\", \"salute\", \"same\",\n  \"sample\", \"sand\", \"satisfy\", \"satoshi\", \"sauce\", \"sausage\", \"save\", \"say\", \"scale\", \"scan\", \"scare\", \"scatter\",\n  \"scene\", \"scheme\", \"school\", \"science\", \"scissors\", \"scorpion\", \"scout\", \"scrap\", \"screen\", \"script\", \"scrub\", \"sea\",\n  \"seal\", \"search\", \"season\", \"seat\", \"second\", \"secret\", \"section\", \"security\", \"seed\", \"seek\", \"segment\", \"select\",\n  \"sell\", \"seminar\", \"senior\", \"sense\", \"sentence\", \"series\", \"service\", \"session\", \"settle\", \"setup\", \"seven\", \"shadow\",\n  \"shaft\", \"shallow\", \"share\", \"shed\", \"shell\", \"sheriff\", \"shield\", \"shift\", \"shine\", \"ship\", \"shiver\", \"shock\",\n  \"shoe\", \"shoot\", \"shop\", \"short\", \"shoulder\", \"shove\", \"shrimp\", \"shrug\", \"shuffle\", \"shy\", \"sibling\", \"sick\",\n  \"side\", \"siege\", \"sight\", \"sign\", \"silent\", \"silk\", \"silly\", \"silver\", \"similar\", \"simple\", \"since\", \"sing\",\n  \"siren\", \"sister\", \"situate\", \"six\", \"size\", \"skate\", \"sketch\", \"ski\", \"skill\", \"skin\", \"skirt\", \"skull\",\n  \"slab\", \"slam\", \"sleep\", \"slender\", \"slice\", \"slide\", \"slight\", \"slim\", \"slogan\", \"slot\", \"slow\", \"slush\",\n  \"small\", \"smart\", \"smile\", \"smoke\", \"smooth\", \"snack\", \"snake\", \"snap\", \"sniff\", \"snow\", \"soap\", \"soccer\",\n  \"social\", \"sock\", \"soda\", \"soft\", \"solar\", \"soldier\", \"solid\", \"solution\", \"solve\", \"someone\", \"song\", \"soon\",\n  \"sorry\", \"sort\", \"soul\", \"sound\", \"soup\", \"source\", \"south\", \"space\", \"spare\", \"spatial\", \"spawn\", \"speak\",\n  \"special\", \"speed\", \"spell\", \"spend\", \"sphere\", \"spice\", \"spider\", \"spike\", \"spin\", \"spirit\", \"split\", \"spoil\",\n  \"sponsor\", \"spoon\", \"sport\", \"spot\", \"spray\", \"spread\", \"spring\", \"spy\", \"square\", \"squeeze\", \"squirrel\", \"stable\",\n  \"stadium\", \"staff\", \"stage\", \"stairs\", \"stamp\", \"stand\", \"start\", \"state\", \"stay\", \"steak\", \"steel\", \"stem\",\n  \"step\", \"stereo\", \"stick\", \"still\", \"sting\", \"stock\", \"stomach\", \"stone\", \"stool\", \"story\", \"stove\", \"strategy\",\n  \"street\", \"strike\", \"strong\", \"struggle\", \"student\", \"stuff\", \"stumble\", \"style\", \"subject\", \"submit\", \"subway\", \"success\",\n  \"such\", \"sudden\", \"suffer\", \"sugar\", \"suggest\", \"suit\", \"summer\", \"sun\", \"sunny\", \"sunset\", \"super\", \"supply\",\n  \"supreme\", \"sure\", \"surface\", \"surge\", \"surprise\", \"surround\", \"survey\", \"suspect\", \"sustain\", \"swallow\", \"swamp\", \"swap\",\n  \"swarm\", \"swear\", \"sweet\", \"swift\", \"swim\", \"swing\", \"switch\", \"sword\", \"symbol\", \"symptom\", \"syrup\", \"system\",\n  \"table\", \"tackle\", \"tag\", \"tail\", \"talent\", \"talk\", \"tank\", \"tape\", \"target\", \"task\", \"taste\", \"tattoo\",\n  \"taxi\", \"teach\", \"team\", \"tell\", \"ten\", \"tenant\", \"tennis\", \"tent\", \"term\", \"test\", \"text\", \"thank\",\n  \"that\", \"theme\", \"then\", \"theory\", \"there\", \"they\", \"thing\", \"this\", \"thought\", \"three\", \"thrive\", \"throw\",\n  \"thumb\", \"thunder\", \"ticket\", \"tide\", \"tiger\", \"tilt\", \"timber\", \"time\", \"tiny\", \"tip\", \"tired\", \"tissue\",\n  \"title\", \"toast\", \"tobacco\", \"today\", \"toddler\", \"toe\", \"together\", \"toilet\", \"token\", \"tomato\", \"tomorrow\", \"tone\",\n  \"tongue\", \"tonight\", \"tool\", \"tooth\", \"top\", \"topic\", \"topple\", \"torch\", \"tornado\", \"tortoise\", \"toss\", \"total\",\n  \"tourist\", \"toward\", \"tower\", \"town\", \"toy\", \"track\", \"trade\", \"traffic\", \"tragic\", \"train\", \"transfer\", \"trap\",\n  \"trash\", \"travel\", \"tray\", \"treat\", \"tree\", \"trend\", \"trial\", \"tribe\", \"trick\", \"trigger\", \"trim\", \"trip\",\n  \"trophy\", \"trouble\", \"truck\", \"true\", \"truly\", \"trumpet\", \"trust\", \"truth\", \"try\", \"tube\", \"tuition\", \"tumble\",\n  \"tuna\", \"tunnel\", \"turkey\", \"turn\", \"turtle\", \"twelve\", \"twenty\", \"twice\", \"twin\", \"twist\", \"two\", \"type\",\n  \"typical\", \"ugly\", \"umbrella\", \"unable\", \"unaware\", \"uncle\", \"uncover\", \"under\", \"undo\", \"unfair\", \"unfold\", \"unhappy\",\n  \"uniform\", \"unique\", \"unit\", \"universe\", \"unknown\", \"unlock\", \"until\", \"unusual\", \"unveil\", \"update\", \"upgrade\", \"uphold\",\n  \"upon\", \"upper\", \"upset\", \"urban\", \"urge\", \"usage\", \"use\", \"used\", \"useful\", \"useless\", \"usual\", \"utility\",\n  \"vacant\", \"vacuum\", \"vague\", \"valid\", \"valley\", \"valve\", \"van\", \"vanish\", \"vapor\", \"various\", \"vast\", \"vault\",\n  \"vehicle\", \"velvet\", \"vendor\", \"venture\", \"venue\", \"verb\", \"verify\", \"version\", \"very\", \"vessel\", \"veteran\", \"viable\",\n  \"vibrant\", \"vicious\", \"victory\", \"video\", \"view\", \"village\", \"vintage\", \"violin\", \"virtual\", \"virus\", \"visa\", \"visit\",\n  \"visual\", \"vital\", \"vivid\", \"vocal\", \"voice\", \"void\", \"volcano\", \"volume\", \"vote\", \"voyage\", \"wage\", \"wagon\",\n  \"wait\", \"walk\", \"wall\", \"wallet\", \"want\", \"war\", \"warm\", \"warrior\", \"wash\", \"wasp\", \"waste\", \"water\",\n  \"wave\", \"way\", \"wealth\", \"weapon\", \"wear\", \"weasel\", \"weather\", \"web\", \"wedding\", \"weekend\", \"weird\", \"welcome\",\n  \"west\", \"wet\", \"whale\", \"what\", \"wheat\", \"wheel\", \"when\", \"where\", \"whip\", \"whisper\", \"wide\", \"width\",\n  \"wife\", \"wild\", \"will\", \"win\", \"window\", \"wine\", \"wing\", \"wink\", \"winner\", \"winter\", \"wire\", \"wisdom\",\n  \"wise\", \"wish\", \"witness\", \"wolf\", \"woman\", \"wonder\", \"wood\", \"wool\", \"word\", \"work\", \"world\", \"worry\",\n  \"worth\", \"wrap\", \"wreck\", \"wrestle\", \"wrist\", \"write\", \"wrong\", \"yard\", \"year\", \"yellow\", \"you\", \"young\",\n  \"youth\", \"zebra\", \"zero\", \"zone\", \"zoo\"\n];\n\nexport interface RecoveryInfo {\n  passphrase: string;\n  encryptedPrivateKey: string;\n}\n\nexport async function generateRecoveryPassphrase(): Promise<string> {\n  const wordCount = 12;\n  const words: string[] = [];\n  \n  const randomValues = new Uint32Array(wordCount);\n  window.crypto.getRandomValues(randomValues);\n  \n  for (let i = 0; i < wordCount; i++) {\n    const index = randomValues[i] % WORD_LIST.length;\n    words.push(WORD_LIST[index]);\n  }\n  \n  return words.join(\" \");\n}\n\nasync function deriveKeyFromPassphrase(passphrase: string): Promise<CryptoKey> {\n  const encoder = new TextEncoder();\n  const passphraseData = encoder.encode(passphrase);\n  \n  const baseKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    passphraseData,\n    \"PBKDF2\",\n    false,\n    [\"deriveKey\"]\n  );\n  \n  const salt = encoder.encode(\"archer-recovery-salt-v1\");\n  \n  return window.crypto.subtle.deriveKey(\n    {\n      name: \"PBKDF2\",\n      salt: salt,\n      iterations: 100000,\n      hash: \"SHA-256\"\n    },\n    baseKey,\n    {\n      name: \"AES-GCM\",\n      length: 256\n    },\n    false,\n    [\"encrypt\", \"decrypt\"]\n  );\n}\n\nexport async function encryptPrivateKeyWithPassphrase(\n  privateKey: string,\n  passphrase: string\n): Promise<string> {\n  const derivedKey = await deriveKeyFromPassphrase(passphrase);\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const encoder = new TextEncoder();\n  const privateKeyData = encoder.encode(privateKey);\n  \n  const encryptedData = await window.crypto.subtle.encrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv\n    },\n    derivedKey,\n    privateKeyData\n  );\n  \n  const combined = new Uint8Array(iv.length + encryptedData.byteLength);\n  combined.set(iv);\n  combined.set(new Uint8Array(encryptedData), iv.length);\n  \n  return arrayBufferToBase64(combined.buffer);\n}\n\nexport async function decryptPrivateKeyWithPassphrase(\n  encryptedPrivateKey: string,\n  passphrase: string\n): Promise<string> {\n  const derivedKey = await deriveKeyFromPassphrase(passphrase);\n  const combined = base64ToArrayBuffer(encryptedPrivateKey);\n  const combinedArray = new Uint8Array(combined);\n  \n  const iv = combinedArray.slice(0, 12);\n  const encryptedData = combinedArray.slice(12);\n  \n  const decryptedData = await window.crypto.subtle.decrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv\n    },\n    derivedKey,\n    encryptedData\n  );\n  \n  const decoder = new TextDecoder();\n  return decoder.decode(decryptedData);\n}\n\nexport async function createRecoveryInfo(privateKey: string): Promise<RecoveryInfo> {\n  const passphrase = await generateRecoveryPassphrase();\n  const encryptedPrivateKey = await encryptPrivateKeyWithPassphrase(privateKey, passphrase);\n  \n  return {\n    passphrase,\n    encryptedPrivateKey\n  };\n}\n\nexport function validatePassphrase(passphrase: string): boolean {\n  const words = passphrase.trim().toLowerCase().split(/\\s+/);\n  \n  if (words.length !== 12) {\n    return false;\n  }\n  \n  return words.every(word => WORD_LIST.includes(word));\n}\n","size_bytes":22701}},"version":2}